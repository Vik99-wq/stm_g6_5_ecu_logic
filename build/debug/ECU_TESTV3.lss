
build/debug/ECU_TESTV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002438  08002438  00003438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002450  08002450  00003450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002458  08002458  00003458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800245c  0800245c  0000345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002460  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000124  20000010  0800246c  00004010  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20000134  0800246c  00004134  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 10 .comment      00000039  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fdd3  00000000  00000000  00004075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001d60  00000000  00000000  00013e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00009225  00000000  00000000  00015ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0001edd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000959  00000000  00000000  0001fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d6aa  00000000  00000000  00020369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000041ac  00000000  00000000  0002da13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002020  00000000  00000000  00031bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000189  00000000  00000000  00033be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_drsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800019c:	e002      	b.n	80001a4 <__adddf3>
 800019e:	bf00      	nop

080001a0 <__aeabi_dsub>:
 80001a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001a4 <__adddf3>:
 80001a4:	b530      	push	{r4, r5, lr}
 80001a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ae:	ea94 0f05 	teq	r4, r5
 80001b2:	bf08      	it	eq
 80001b4:	ea90 0f02 	teqeq	r0, r2
 80001b8:	bf1f      	itttt	ne
 80001ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ca:	f000 80e2 	beq.w	8000392 <__adddf3+0x1ee>
 80001ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d6:	bfb8      	it	lt
 80001d8:	426d      	neglt	r5, r5
 80001da:	dd0c      	ble.n	80001f6 <__adddf3+0x52>
 80001dc:	442c      	add	r4, r5
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	ea82 0000 	eor.w	r0, r2, r0
 80001ea:	ea83 0101 	eor.w	r1, r3, r1
 80001ee:	ea80 0202 	eor.w	r2, r0, r2
 80001f2:	ea81 0303 	eor.w	r3, r1, r3
 80001f6:	2d36      	cmp	r5, #54	@ 0x36
 80001f8:	bf88      	it	hi
 80001fa:	bd30      	pophi	{r4, r5, pc}
 80001fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000200:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000204:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000208:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x70>
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000218:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800021c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000220:	d002      	beq.n	8000228 <__adddf3+0x84>
 8000222:	4252      	negs	r2, r2
 8000224:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000228:	ea94 0f05 	teq	r4, r5
 800022c:	f000 80a7 	beq.w	800037e <__adddf3+0x1da>
 8000230:	f1a4 0401 	sub.w	r4, r4, #1
 8000234:	f1d5 0e20 	rsbs	lr, r5, #32
 8000238:	db0d      	blt.n	8000256 <__adddf3+0xb2>
 800023a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023e:	fa22 f205 	lsr.w	r2, r2, r5
 8000242:	1880      	adds	r0, r0, r2
 8000244:	f141 0100 	adc.w	r1, r1, #0
 8000248:	fa03 f20e 	lsl.w	r2, r3, lr
 800024c:	1880      	adds	r0, r0, r2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	4159      	adcs	r1, r3
 8000254:	e00e      	b.n	8000274 <__adddf3+0xd0>
 8000256:	f1a5 0520 	sub.w	r5, r5, #32
 800025a:	f10e 0e20 	add.w	lr, lr, #32
 800025e:	2a01      	cmp	r2, #1
 8000260:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000264:	bf28      	it	cs
 8000266:	f04c 0c02 	orrcs.w	ip, ip, #2
 800026a:	fa43 f305 	asr.w	r3, r3, r5
 800026e:	18c0      	adds	r0, r0, r3
 8000270:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000274:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000278:	d507      	bpl.n	800028a <__adddf3+0xe6>
 800027a:	f04f 0e00 	mov.w	lr, #0
 800027e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000282:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000286:	eb6e 0101 	sbc.w	r1, lr, r1
 800028a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800028e:	d31b      	bcc.n	80002c8 <__adddf3+0x124>
 8000290:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000294:	d30c      	bcc.n	80002b0 <__adddf3+0x10c>
 8000296:	0849      	lsrs	r1, r1, #1
 8000298:	ea5f 0030 	movs.w	r0, r0, rrx
 800029c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002a0:	f104 0401 	add.w	r4, r4, #1
 80002a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ac:	f080 809a 	bcs.w	80003e4 <__adddf3+0x240>
 80002b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	ea41 0105 	orr.w	r1, r1, r5
 80002c6:	bd30      	pop	{r4, r5, pc}
 80002c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002cc:	4140      	adcs	r0, r0
 80002ce:	eb41 0101 	adc.w	r1, r1, r1
 80002d2:	3c01      	subs	r4, #1
 80002d4:	bf28      	it	cs
 80002d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002da:	d2e9      	bcs.n	80002b0 <__adddf3+0x10c>
 80002dc:	f091 0f00 	teq	r1, #0
 80002e0:	bf04      	itt	eq
 80002e2:	4601      	moveq	r1, r0
 80002e4:	2000      	moveq	r0, #0
 80002e6:	fab1 f381 	clz	r3, r1
 80002ea:	bf08      	it	eq
 80002ec:	3320      	addeq	r3, #32
 80002ee:	f1a3 030b 	sub.w	r3, r3, #11
 80002f2:	f1b3 0220 	subs.w	r2, r3, #32
 80002f6:	da0c      	bge.n	8000312 <__adddf3+0x16e>
 80002f8:	320c      	adds	r2, #12
 80002fa:	dd08      	ble.n	800030e <__adddf3+0x16a>
 80002fc:	f102 0c14 	add.w	ip, r2, #20
 8000300:	f1c2 020c 	rsb	r2, r2, #12
 8000304:	fa01 f00c 	lsl.w	r0, r1, ip
 8000308:	fa21 f102 	lsr.w	r1, r1, r2
 800030c:	e00c      	b.n	8000328 <__adddf3+0x184>
 800030e:	f102 0214 	add.w	r2, r2, #20
 8000312:	bfd8      	it	le
 8000314:	f1c2 0c20 	rsble	ip, r2, #32
 8000318:	fa01 f102 	lsl.w	r1, r1, r2
 800031c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000320:	bfdc      	itt	le
 8000322:	ea41 010c 	orrle.w	r1, r1, ip
 8000326:	4090      	lslle	r0, r2
 8000328:	1ae4      	subs	r4, r4, r3
 800032a:	bfa2      	ittt	ge
 800032c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000330:	4329      	orrge	r1, r5
 8000332:	bd30      	popge	{r4, r5, pc}
 8000334:	ea6f 0404 	mvn.w	r4, r4
 8000338:	3c1f      	subs	r4, #31
 800033a:	da1c      	bge.n	8000376 <__adddf3+0x1d2>
 800033c:	340c      	adds	r4, #12
 800033e:	dc0e      	bgt.n	800035e <__adddf3+0x1ba>
 8000340:	f104 0414 	add.w	r4, r4, #20
 8000344:	f1c4 0220 	rsb	r2, r4, #32
 8000348:	fa20 f004 	lsr.w	r0, r0, r4
 800034c:	fa01 f302 	lsl.w	r3, r1, r2
 8000350:	ea40 0003 	orr.w	r0, r0, r3
 8000354:	fa21 f304 	lsr.w	r3, r1, r4
 8000358:	ea45 0103 	orr.w	r1, r5, r3
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f1c4 040c 	rsb	r4, r4, #12
 8000362:	f1c4 0220 	rsb	r2, r4, #32
 8000366:	fa20 f002 	lsr.w	r0, r0, r2
 800036a:	fa01 f304 	lsl.w	r3, r1, r4
 800036e:	ea40 0003 	orr.w	r0, r0, r3
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	fa21 f004 	lsr.w	r0, r1, r4
 800037a:	4629      	mov	r1, r5
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	f094 0f00 	teq	r4, #0
 8000382:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000386:	bf06      	itte	eq
 8000388:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800038c:	3401      	addeq	r4, #1
 800038e:	3d01      	subne	r5, #1
 8000390:	e74e      	b.n	8000230 <__adddf3+0x8c>
 8000392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000396:	bf18      	it	ne
 8000398:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800039c:	d029      	beq.n	80003f2 <__adddf3+0x24e>
 800039e:	ea94 0f05 	teq	r4, r5
 80003a2:	bf08      	it	eq
 80003a4:	ea90 0f02 	teqeq	r0, r2
 80003a8:	d005      	beq.n	80003b6 <__adddf3+0x212>
 80003aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ae:	bf04      	itt	eq
 80003b0:	4619      	moveq	r1, r3
 80003b2:	4610      	moveq	r0, r2
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea91 0f03 	teq	r1, r3
 80003ba:	bf1e      	ittt	ne
 80003bc:	2100      	movne	r1, #0
 80003be:	2000      	movne	r0, #0
 80003c0:	bd30      	popne	{r4, r5, pc}
 80003c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c6:	d105      	bne.n	80003d4 <__adddf3+0x230>
 80003c8:	0040      	lsls	r0, r0, #1
 80003ca:	4149      	adcs	r1, r1
 80003cc:	bf28      	it	cs
 80003ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d8:	bf3c      	itt	cc
 80003da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003de:	bd30      	popcc	{r4, r5, pc}
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf1a      	itte	ne
 80003f8:	4619      	movne	r1, r3
 80003fa:	4610      	movne	r0, r2
 80003fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000400:	bf1c      	itt	ne
 8000402:	460b      	movne	r3, r1
 8000404:	4602      	movne	r2, r0
 8000406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800040a:	bf06      	itte	eq
 800040c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000410:	ea91 0f03 	teqeq	r1, r3
 8000414:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	bf00      	nop

0800041c <__aeabi_ui2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000430:	f04f 0500 	mov.w	r5, #0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e750      	b.n	80002dc <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_i2d>:
 800043c:	f090 0f00 	teq	r0, #0
 8000440:	bf04      	itt	eq
 8000442:	2100      	moveq	r1, #0
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800044c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000450:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000454:	bf48      	it	mi
 8000456:	4240      	negmi	r0, r0
 8000458:	f04f 0100 	mov.w	r1, #0
 800045c:	e73e      	b.n	80002dc <__adddf3+0x138>
 800045e:	bf00      	nop

08000460 <__aeabi_f2d>:
 8000460:	0042      	lsls	r2, r0, #1
 8000462:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000466:	ea4f 0131 	mov.w	r1, r1, rrx
 800046a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046e:	bf1f      	itttt	ne
 8000470:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000474:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000478:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800047c:	4770      	bxne	lr
 800047e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000482:	bf08      	it	eq
 8000484:	4770      	bxeq	lr
 8000486:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800048a:	bf04      	itt	eq
 800048c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	e71c      	b.n	80002dc <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_ul2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f04f 0500 	mov.w	r5, #0
 80004b2:	e00a      	b.n	80004ca <__aeabi_l2d+0x16>

080004b4 <__aeabi_l2d>:
 80004b4:	ea50 0201 	orrs.w	r2, r0, r1
 80004b8:	bf08      	it	eq
 80004ba:	4770      	bxeq	lr
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004c2:	d502      	bpl.n	80004ca <__aeabi_l2d+0x16>
 80004c4:	4240      	negs	r0, r0
 80004c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d6:	f43f aed8 	beq.w	800028a <__adddf3+0xe6>
 80004da:	f04f 0203 	mov.w	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ea:	bf18      	it	ne
 80004ec:	3203      	addne	r2, #3
 80004ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004f2:	f1c2 0320 	rsb	r3, r2, #32
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	fa20 f002 	lsr.w	r0, r0, r2
 80004fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000502:	ea40 000e 	orr.w	r0, r0, lr
 8000506:	fa21 f102 	lsr.w	r1, r1, r2
 800050a:	4414      	add	r4, r2
 800050c:	e6bd      	b.n	800028a <__adddf3+0xe6>
 800050e:	bf00      	nop

08000510 <__aeabi_dmul>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000516:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800051a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051e:	bf1d      	ittte	ne
 8000520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000524:	ea94 0f0c 	teqne	r4, ip
 8000528:	ea95 0f0c 	teqne	r5, ip
 800052c:	f000 f8de 	bleq	80006ec <__aeabi_dmul+0x1dc>
 8000530:	442c      	add	r4, r5
 8000532:	ea81 0603 	eor.w	r6, r1, r3
 8000536:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800053a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000542:	bf18      	it	ne
 8000544:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000548:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800054c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000550:	d038      	beq.n	80005c4 <__aeabi_dmul+0xb4>
 8000552:	fba0 ce02 	umull	ip, lr, r0, r2
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000562:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000566:	f04f 0600 	mov.w	r6, #0
 800056a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056e:	f09c 0f00 	teq	ip, #0
 8000572:	bf18      	it	ne
 8000574:	f04e 0e01 	orrne.w	lr, lr, #1
 8000578:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800057c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000580:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000584:	d204      	bcs.n	8000590 <__aeabi_dmul+0x80>
 8000586:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800058a:	416d      	adcs	r5, r5
 800058c:	eb46 0606 	adc.w	r6, r6, r6
 8000590:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000594:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000598:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800059c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a8:	bf88      	it	hi
 80005aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ae:	d81e      	bhi.n	80005ee <__aeabi_dmul+0xde>
 80005b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005b4:	bf08      	it	eq
 80005b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ba:	f150 0000 	adcs.w	r0, r0, #0
 80005be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c8:	ea46 0101 	orr.w	r1, r6, r1
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	ea81 0103 	eor.w	r1, r1, r3
 80005d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d8:	bfc2      	ittt	gt
 80005da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005e2:	bd70      	popgt	{r4, r5, r6, pc}
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e8:	f04f 0e00 	mov.w	lr, #0
 80005ec:	3c01      	subs	r4, #1
 80005ee:	f300 80ab 	bgt.w	8000748 <__aeabi_dmul+0x238>
 80005f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005f6:	bfde      	ittt	le
 80005f8:	2000      	movle	r0, #0
 80005fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005fe:	bd70      	pople	{r4, r5, r6, pc}
 8000600:	f1c4 0400 	rsb	r4, r4, #0
 8000604:	3c20      	subs	r4, #32
 8000606:	da35      	bge.n	8000674 <__aeabi_dmul+0x164>
 8000608:	340c      	adds	r4, #12
 800060a:	dc1b      	bgt.n	8000644 <__aeabi_dmul+0x134>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f305 	lsl.w	r3, r0, r5
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f205 	lsl.w	r2, r1, r5
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000628:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	fa21 f604 	lsr.w	r6, r1, r4
 8000634:	eb42 0106 	adc.w	r1, r2, r6
 8000638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800063c:	bf08      	it	eq
 800063e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f1c4 040c 	rsb	r4, r4, #12
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f304 	lsl.w	r3, r0, r4
 8000650:	fa20 f005 	lsr.w	r0, r0, r5
 8000654:	fa01 f204 	lsl.w	r2, r1, r4
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	f141 0100 	adc.w	r1, r1, #0
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f205 	lsl.w	r2, r0, r5
 800067c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000680:	fa20 f304 	lsr.w	r3, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea43 0302 	orr.w	r3, r3, r2
 800068c:	fa21 f004 	lsr.w	r0, r1, r4
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	fa21 f204 	lsr.w	r2, r1, r4
 8000698:	ea20 0002 	bic.w	r0, r0, r2
 800069c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f094 0f00 	teq	r4, #0
 80006b0:	d10f      	bne.n	80006d2 <__aeabi_dmul+0x1c2>
 80006b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006b6:	0040      	lsls	r0, r0, #1
 80006b8:	eb41 0101 	adc.w	r1, r1, r1
 80006bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3c01      	subeq	r4, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1a6>
 80006c6:	ea41 0106 	orr.w	r1, r1, r6
 80006ca:	f095 0f00 	teq	r5, #0
 80006ce:	bf18      	it	ne
 80006d0:	4770      	bxne	lr
 80006d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	eb43 0303 	adc.w	r3, r3, r3
 80006dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006e0:	bf08      	it	eq
 80006e2:	3d01      	subeq	r5, #1
 80006e4:	d0f7      	beq.n	80006d6 <__aeabi_dmul+0x1c6>
 80006e6:	ea43 0306 	orr.w	r3, r3, r6
 80006ea:	4770      	bx	lr
 80006ec:	ea94 0f0c 	teq	r4, ip
 80006f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f4:	bf18      	it	ne
 80006f6:	ea95 0f0c 	teqne	r5, ip
 80006fa:	d00c      	beq.n	8000716 <__aeabi_dmul+0x206>
 80006fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000700:	bf18      	it	ne
 8000702:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000706:	d1d1      	bne.n	80006ac <__aeabi_dmul+0x19c>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f04f 0000 	mov.w	r0, #0
 8000714:	bd70      	pop	{r4, r5, r6, pc}
 8000716:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800071a:	bf06      	itte	eq
 800071c:	4610      	moveq	r0, r2
 800071e:	4619      	moveq	r1, r3
 8000720:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000724:	d019      	beq.n	800075a <__aeabi_dmul+0x24a>
 8000726:	ea94 0f0c 	teq	r4, ip
 800072a:	d102      	bne.n	8000732 <__aeabi_dmul+0x222>
 800072c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000730:	d113      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000732:	ea95 0f0c 	teq	r5, ip
 8000736:	d105      	bne.n	8000744 <__aeabi_dmul+0x234>
 8000738:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800073c:	bf1c      	itt	ne
 800073e:	4610      	movne	r0, r2
 8000740:	4619      	movne	r1, r3
 8000742:	d10a      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000762:	bd70      	pop	{r4, r5, r6, pc}

08000764 <__aeabi_ddiv>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800076a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800076e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000772:	bf1d      	ittte	ne
 8000774:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000778:	ea94 0f0c 	teqne	r4, ip
 800077c:	ea95 0f0c 	teqne	r5, ip
 8000780:	f000 f8a7 	bleq	80008d2 <__aeabi_ddiv+0x16e>
 8000784:	eba4 0405 	sub.w	r4, r4, r5
 8000788:	ea81 0e03 	eor.w	lr, r1, r3
 800078c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000790:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000794:	f000 8088 	beq.w	80008a8 <__aeabi_ddiv+0x144>
 8000798:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800079c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007bc:	429d      	cmp	r5, r3
 80007be:	bf08      	it	eq
 80007c0:	4296      	cmpeq	r6, r2
 80007c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007ca:	d202      	bcs.n	80007d2 <__aeabi_ddiv+0x6e>
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	1ab6      	subs	r6, r6, r2
 80007d4:	eb65 0503 	sbc.w	r5, r5, r3
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000840:	ea55 0e06 	orrs.w	lr, r5, r6
 8000844:	d018      	beq.n	8000878 <__aeabi_ddiv+0x114>
 8000846:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800084a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000852:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000856:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800085a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000862:	d1c0      	bne.n	80007e6 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	d10b      	bne.n	8000882 <__aeabi_ddiv+0x11e>
 800086a:	ea41 0100 	orr.w	r1, r1, r0
 800086e:	f04f 0000 	mov.w	r0, #0
 8000872:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000876:	e7b6      	b.n	80007e6 <__aeabi_ddiv+0x82>
 8000878:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800087c:	bf04      	itt	eq
 800087e:	4301      	orreq	r1, r0
 8000880:	2000      	moveq	r0, #0
 8000882:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000886:	bf88      	it	hi
 8000888:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800088c:	f63f aeaf 	bhi.w	80005ee <__aeabi_dmul+0xde>
 8000890:	ebb5 0c03 	subs.w	ip, r5, r3
 8000894:	bf04      	itt	eq
 8000896:	ebb6 0c02 	subseq.w	ip, r6, r2
 800089a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089e:	f150 0000 	adcs.w	r0, r0, #0
 80008a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b4:	bfc2      	ittt	gt
 80008b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008be:	bd70      	popgt	{r4, r5, r6, pc}
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c4:	f04f 0e00 	mov.w	lr, #0
 80008c8:	3c01      	subs	r4, #1
 80008ca:	e690      	b.n	80005ee <__aeabi_dmul+0xde>
 80008cc:	ea45 0e06 	orr.w	lr, r5, r6
 80008d0:	e68d      	b.n	80005ee <__aeabi_dmul+0xde>
 80008d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d6:	ea94 0f0c 	teq	r4, ip
 80008da:	bf08      	it	eq
 80008dc:	ea95 0f0c 	teqeq	r5, ip
 80008e0:	f43f af3b 	beq.w	800075a <__aeabi_dmul+0x24a>
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	d10a      	bne.n	8000900 <__aeabi_ddiv+0x19c>
 80008ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ee:	f47f af34 	bne.w	800075a <__aeabi_dmul+0x24a>
 80008f2:	ea95 0f0c 	teq	r5, ip
 80008f6:	f47f af25 	bne.w	8000744 <__aeabi_dmul+0x234>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e72c      	b.n	800075a <__aeabi_dmul+0x24a>
 8000900:	ea95 0f0c 	teq	r5, ip
 8000904:	d106      	bne.n	8000914 <__aeabi_ddiv+0x1b0>
 8000906:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800090a:	f43f aefd 	beq.w	8000708 <__aeabi_dmul+0x1f8>
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	e722      	b.n	800075a <__aeabi_dmul+0x24a>
 8000914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091e:	f47f aec5 	bne.w	80006ac <__aeabi_dmul+0x19c>
 8000922:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000926:	f47f af0d 	bne.w	8000744 <__aeabi_dmul+0x234>
 800092a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092e:	f47f aeeb 	bne.w	8000708 <__aeabi_dmul+0x1f8>
 8000932:	e712      	b.n	800075a <__aeabi_dmul+0x24a>

08000934 <__gedf2>:
 8000934:	f04f 3cff 	mov.w	ip, #4294967295
 8000938:	e006      	b.n	8000948 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__ledf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	e002      	b.n	8000948 <__cmpdf2+0x4>
 8000942:	bf00      	nop

08000944 <__cmpdf2>:
 8000944:	f04f 0c01 	mov.w	ip, #1
 8000948:	f84d cd04 	str.w	ip, [sp, #-4]!
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095e:	d01b      	beq.n	8000998 <__cmpdf2+0x54>
 8000960:	b001      	add	sp, #4
 8000962:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000966:	bf0c      	ite	eq
 8000968:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800096c:	ea91 0f03 	teqne	r1, r3
 8000970:	bf02      	ittt	eq
 8000972:	ea90 0f02 	teqeq	r0, r2
 8000976:	2000      	moveq	r0, #0
 8000978:	4770      	bxeq	lr
 800097a:	f110 0f00 	cmn.w	r0, #0
 800097e:	ea91 0f03 	teq	r1, r3
 8000982:	bf58      	it	pl
 8000984:	4299      	cmppl	r1, r3
 8000986:	bf08      	it	eq
 8000988:	4290      	cmpeq	r0, r2
 800098a:	bf2c      	ite	cs
 800098c:	17d8      	asrcs	r0, r3, #31
 800098e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000992:	f040 0001 	orr.w	r0, r0, #1
 8000996:	4770      	bx	lr
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d102      	bne.n	80009a8 <__cmpdf2+0x64>
 80009a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a6:	d107      	bne.n	80009b8 <__cmpdf2+0x74>
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	d1d6      	bne.n	8000960 <__cmpdf2+0x1c>
 80009b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b6:	d0d3      	beq.n	8000960 <__cmpdf2+0x1c>
 80009b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <__aeabi_cdrcmple>:
 80009c0:	4684      	mov	ip, r0
 80009c2:	4610      	mov	r0, r2
 80009c4:	4662      	mov	r2, ip
 80009c6:	468c      	mov	ip, r1
 80009c8:	4619      	mov	r1, r3
 80009ca:	4663      	mov	r3, ip
 80009cc:	e000      	b.n	80009d0 <__aeabi_cdcmpeq>
 80009ce:	bf00      	nop

080009d0 <__aeabi_cdcmpeq>:
 80009d0:	b501      	push	{r0, lr}
 80009d2:	f7ff ffb7 	bl	8000944 <__cmpdf2>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	bf48      	it	mi
 80009da:	f110 0f00 	cmnmi.w	r0, #0
 80009de:	bd01      	pop	{r0, pc}

080009e0 <__aeabi_dcmpeq>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff fff4 	bl	80009d0 <__aeabi_cdcmpeq>
 80009e8:	bf0c      	ite	eq
 80009ea:	2001      	moveq	r0, #1
 80009ec:	2000      	movne	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmplt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffea 	bl	80009d0 <__aeabi_cdcmpeq>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmple>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffe0 	bl	80009d0 <__aeabi_cdcmpeq>
 8000a10:	bf94      	ite	ls
 8000a12:	2001      	movls	r0, #1
 8000a14:	2000      	movhi	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpge>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffce 	bl	80009c0 <__aeabi_cdrcmple>
 8000a24:	bf94      	ite	ls
 8000a26:	2001      	movls	r0, #1
 8000a28:	2000      	movhi	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmpgt>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffc4 	bl	80009c0 <__aeabi_cdrcmple>
 8000a38:	bf34      	ite	cc
 8000a3a:	2001      	movcc	r0, #1
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b80c 	b.w	8000b14 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f001 fb2e 	bl	8002164 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__do_global_dtors_aux>:
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	4c05      	ldr	r4, [pc, #20]	@ (8000b30 <__do_global_dtors_aux+0x18>)
 8000b1c:	7823      	ldrb	r3, [r4, #0]
 8000b1e:	b933      	cbnz	r3, 8000b2e <__do_global_dtors_aux+0x16>
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <__do_global_dtors_aux+0x1c>)
 8000b22:	b113      	cbz	r3, 8000b2a <__do_global_dtors_aux+0x12>
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <__do_global_dtors_aux+0x20>)
 8000b26:	f3af 8000 	nop.w
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	7023      	strb	r3, [r4, #0]
 8000b2e:	bd10      	pop	{r4, pc}
 8000b30:	20000010 	.word	0x20000010
 8000b34:	00000000 	.word	0x00000000
 8000b38:	08002420 	.word	0x08002420

08000b3c <frame_dummy>:
 8000b3c:	b508      	push	{r3, lr}
 8000b3e:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <frame_dummy+0x10>)
 8000b40:	b11b      	cbz	r3, 8000b4a <frame_dummy+0xe>
 8000b42:	4903      	ldr	r1, [pc, #12]	@ (8000b50 <frame_dummy+0x14>)
 8000b44:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <frame_dummy+0x18>)
 8000b46:	f3af 8000 	nop.w
 8000b4a:	bd08      	pop	{r3, pc}
 8000b4c:	00000000 	.word	0x00000000
 8000b50:	20000014 	.word	0x20000014
 8000b54:	08002420 	.word	0x08002420

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b530      	push	{r4, r5, lr}
 8000b5a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	9405      	str	r4, [sp, #20]
 8000b60:	9406      	str	r4, [sp, #24]
 8000b62:	9407      	str	r4, [sp, #28]
 8000b64:	9408      	str	r4, [sp, #32]
 8000b66:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	9401      	str	r4, [sp, #4]
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <MX_GPIO_Init+0xc4>)
 8000b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b6e:	f042 0204 	orr.w	r2, r2, #4
 8000b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b76:	f002 0204 	and.w	r2, r2, #4
 8000b7a:	9201      	str	r2, [sp, #4]
 8000b7c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7e:	9402      	str	r4, [sp, #8]
 8000b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b8a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000b8e:	9202      	str	r2, [sp, #8]
 8000b90:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	9403      	str	r4, [sp, #12]
 8000b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b96:	f042 0201 	orr.w	r2, r2, #1
 8000b9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b9e:	f002 0201 	and.w	r2, r2, #1
 8000ba2:	9203      	str	r2, [sp, #12]
 8000ba4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	9404      	str	r4, [sp, #16]
 8000ba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000baa:	f042 0202 	orr.w	r2, r2, #2
 8000bae:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	9304      	str	r3, [sp, #16]
 8000bb8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bba:	4d19      	ldr	r5, [pc, #100]	@ (8000c20 <MX_GPIO_Init+0xc8>)
 8000bbc:	4622      	mov	r2, r4
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f000 fb47 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bd0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	a905      	add	r1, sp, #20
 8000bd6:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <MX_GPIO_Init+0xcc>)
 8000bd8:	f000 fa58 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be8:	a905      	add	r1, sp, #20
 8000bea:	4628      	mov	r0, r5
 8000bec:	f000 fa4e 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bfa:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	a905      	add	r1, sp, #20
 8000c00:	4628      	mov	r0, r5
 8000c02:	f000 fa43 	bl	800108c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c06:	4622      	mov	r2, r4
 8000c08:	4621      	mov	r1, r4
 8000c0a:	2017      	movs	r0, #23
 8000c0c:	f000 fa16 	bl	800103c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c10:	2017      	movs	r0, #23
 8000c12:	f000 fa23 	bl	800105c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c16:	b00b      	add	sp, #44	@ 0x2c
 8000c18:	bd30      	pop	{r4, r5, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020800 	.word	0x40020800

08000c28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    // Check if EXTI8 triggered the interrupt
    if (GPIO_Pin == GPIO_PIN_8) 
 8000c28:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000c2c:	d000      	beq.n	8000c30 <HAL_GPIO_EXTI_Callback+0x8>
 8000c2e:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      // Retrieve the current timer count
      curr_tim2Counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000c32:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8000c38:	4b3a      	ldr	r3, [pc, #232]	@ (8000d24 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000c3a:	601c      	str	r4, [r3, #0]

      // Check if we have at least two previous cycles
      if (COUNTER > 1)
 8000c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d28 <HAL_GPIO_EXTI_Callback+0x100>)
 8000c3e:	681d      	ldr	r5, [r3, #0]
 8000c40:	2d01      	cmp	r5, #1
 8000c42:	dd5b      	ble.n	8000cfc <HAL_GPIO_EXTI_Callback+0xd4>
      {
          if (curr_tim2Counter >= prev_prev_tim2Counter)
 8000c44:	4b39      	ldr	r3, [pc, #228]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x104>)
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	4284      	cmp	r4, r0
 8000c4a:	db30      	blt.n	8000cae <HAL_GPIO_EXTI_Callback+0x86>
          {
              time_diff = curr_tim2Counter - prev_prev_tim2Counter;
 8000c4c:	1a20      	subs	r0, r4, r0
 8000c4e:	f7ff fbf5 	bl	800043c <__aeabi_i2d>
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x108>)
 8000c58:	e9c3 6700 	strd	r6, r7, [r3]
              time_diff_us = time_diff / 10.0;
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c60:	f7ff fd80 	bl	8000764 <__aeabi_ddiv>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4933      	ldr	r1, [pc, #204]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x110>)
 8000c6a:	e9c1 2300 	strd	r2, r3, [r1]
              frequency = MusTOhz / time_diff_us;  // Convert time_diff to Hz
 8000c6e:	a12a      	add	r1, pc, #168	@ (adr r1, 8000d18 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c74:	f7ff fd76 	bl	8000764 <__aeabi_ddiv>
 8000c78:	f7ff fee4 	bl	8000a44 <__aeabi_d2f>
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x114>)
 8000c7e:	6018      	str	r0, [r3, #0]
              time_diff = (4294967295 - prev_prev_tim2Counter) + curr_tim2Counter + 1;
              time_diff_us = time_diff / 10.0;
              frequency = MusTOhz / time_diff_us;  // Convert time_diff to Hz
          }       

          if (time_diff > 0) 
 8000c80:	2200      	movs	r2, #0
 8000c82:	2300      	movs	r3, #0
 8000c84:	492a      	ldr	r1, [pc, #168]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x108>)
 8000c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c8a:	f7ff fed1 	bl	8000a30 <__aeabi_dcmpgt>
 8000c8e:	b388      	cbz	r0, 8000cf4 <HAL_GPIO_EXTI_Callback+0xcc>
          {
            RPM = frequency * HzToRPM;                   // Convert Hz to RPM
 8000c90:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x114>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000d40 <HAL_GPIO_EXTI_Callback+0x118>
 8000c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9e:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000ca0:	edc3 7a00 	vstr	s15, [r3]
            RPM *= 2;   // Manually correcting for the fact that it's trigering on the rising and falling edge
 8000ca4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ca8:	edc3 7a00 	vstr	s15, [r3]
 8000cac:	e029      	b.n	8000d02 <HAL_GPIO_EXTI_Callback+0xda>
              time_diff = (4294967295 - prev_prev_tim2Counter) + curr_tim2Counter + 1;
 8000cae:	f1d0 33ff 	rsbs	r3, r0, #4294967295
 8000cb2:	17e1      	asrs	r1, r4, #31
 8000cb4:	18e3      	adds	r3, r4, r3
 8000cb6:	eb41 71d0 	adc.w	r1, r1, r0, lsr #31
 8000cba:	1c58      	adds	r0, r3, #1
 8000cbc:	f141 0100 	adc.w	r1, r1, #0
 8000cc0:	f7ff fbf8 	bl	80004b4 <__aeabi_l2d>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	460f      	mov	r7, r1
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x108>)
 8000cca:	e9c3 6700 	strd	r6, r7, [r3]
              time_diff_us = time_diff / 10.0;
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000cd2:	f7ff fd47 	bl	8000764 <__aeabi_ddiv>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4917      	ldr	r1, [pc, #92]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x110>)
 8000cdc:	e9c1 2300 	strd	r2, r3, [r1]
              frequency = MusTOhz / time_diff_us;  // Convert time_diff to Hz
 8000ce0:	a10d      	add	r1, pc, #52	@ (adr r1, 8000d18 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ce6:	f7ff fd3d 	bl	8000764 <__aeabi_ddiv>
 8000cea:	f7ff feab 	bl	8000a44 <__aeabi_d2f>
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x114>)
 8000cf0:	6018      	str	r0, [r3, #0]
 8000cf2:	e7c5      	b.n	8000c80 <HAL_GPIO_EXTI_Callback+0x58>
          } 
          else 
          {
            RPM = -1;  // Error case
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000cf6:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <HAL_GPIO_EXTI_Callback+0x120>)
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e002      	b.n	8000d02 <HAL_GPIO_EXTI_Callback+0xda>
          }
      } 
      else
      {
          RPM = -1;  // Not enough cycles to calculate RPM
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <HAL_GPIO_EXTI_Callback+0x120>)
 8000d00:	601a      	str	r2, [r3, #0]
      }

      // Update previous timer values for the next cycle
      prev_prev_tim2Counter = prev_tim2Counter;
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_GPIO_EXTI_Callback+0x124>)
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x104>)
 8000d08:	6011      	str	r1, [r2, #0]
      prev_tim2Counter = curr_tim2Counter;
 8000d0a:	601c      	str	r4, [r3, #0]

      COUNTER++;
 8000d0c:	3501      	adds	r5, #1
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_GPIO_EXTI_Callback+0x100>)
 8000d10:	601d      	str	r5, [r3, #0]
    }
}
 8000d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d14:	f3af 8000 	nop.w
 8000d18:	00000000 	.word	0x00000000
 8000d1c:	412e8480 	.word	0x412e8480
 8000d20:	200000bc 	.word	0x200000bc
 8000d24:	20000128 	.word	0x20000128
 8000d28:	2000012c 	.word	0x2000012c
 8000d2c:	20000120 	.word	0x20000120
 8000d30:	20000110 	.word	0x20000110
 8000d34:	40240000 	.word	0x40240000
 8000d38:	20000108 	.word	0x20000108
 8000d3c:	20000118 	.word	0x20000118
 8000d40:	42700000 	.word	0x42700000
 8000d44:	2000011c 	.word	0x2000011c
 8000d48:	bf800000 	.word	0xbf800000
 8000d4c:	20000124 	.word	0x20000124

08000d50 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <Error_Handler+0x2>

08000d54 <MX_USART2_UART_Init>:
{
 8000d54:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000d56:	480a      	ldr	r0, [pc, #40]	@ (8000d80 <MX_USART2_UART_Init+0x2c>)
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <MX_USART2_UART_Init+0x30>)
 8000d5a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000d5c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000d60:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	2300      	movs	r3, #0
 8000d64:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d66:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d68:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d72:	f001 f94d 	bl	8002010 <HAL_UART_Init>
 8000d76:	b900      	cbnz	r0, 8000d7a <MX_USART2_UART_Init+0x26>
}
 8000d78:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d7a:	f7ff ffe9 	bl	8000d50 <Error_Handler>
 8000d7e:	bf00      	nop
 8000d80:	2000002c 	.word	0x2000002c
 8000d84:	40004400 	.word	0x40004400

08000d88 <MX_TIM2_Init>:
{
 8000d88:	b500      	push	{lr}
 8000d8a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	9303      	str	r3, [sp, #12]
 8000d92:	9304      	str	r3, [sp, #16]
 8000d94:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <MX_TIM2_Init+0x64>)
 8000d9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da0:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 7;
 8000da2:	2207      	movs	r2, #7
 8000da4:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db2:	f000 ffad 	bl	8001d10 <HAL_TIM_Base_Init>
 8000db6:	b990      	cbnz	r0, 8000dde <MX_TIM2_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbe:	a902      	add	r1, sp, #8
 8000dc0:	480a      	ldr	r0, [pc, #40]	@ (8000dec <MX_TIM2_Init+0x64>)
 8000dc2:	f000 ffde 	bl	8001d82 <HAL_TIM_ConfigClockSource>
 8000dc6:	b960      	cbnz	r0, 8000de2 <MX_TIM2_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dcc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dce:	4669      	mov	r1, sp
 8000dd0:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_TIM2_Init+0x64>)
 8000dd2:	f001 f855 	bl	8001e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	b930      	cbnz	r0, 8000de6 <MX_TIM2_Init+0x5e>
}
 8000dd8:	b007      	add	sp, #28
 8000dda:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000dde:	f7ff ffb7 	bl	8000d50 <Error_Handler>
    Error_Handler();
 8000de2:	f7ff ffb5 	bl	8000d50 <Error_Handler>
    Error_Handler();
 8000de6:	f7ff ffb3 	bl	8000d50 <Error_Handler>
 8000dea:	bf00      	nop
 8000dec:	200000bc 	.word	0x200000bc

08000df0 <MX_USART1_UART_Init>:
{
 8000df0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000df2:	480a      	ldr	r0, [pc, #40]	@ (8000e1c <MX_USART1_UART_Init+0x2c>)
 8000df4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <MX_USART1_UART_Init+0x30>)
 8000df6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000df8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000dfc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e02:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e04:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e06:	220c      	movs	r2, #12
 8000e08:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0e:	f001 f8ff 	bl	8002010 <HAL_UART_Init>
 8000e12:	b900      	cbnz	r0, 8000e16 <MX_USART1_UART_Init+0x26>
}
 8000e14:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e16:	f7ff ff9b 	bl	8000d50 <Error_Handler>
 8000e1a:	bf00      	nop
 8000e1c:	20000074 	.word	0x20000074
 8000e20:	40011000 	.word	0x40011000

08000e24 <SystemClock_Config>:
{
 8000e24:	b500      	push	{lr}
 8000e26:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e28:	2230      	movs	r2, #48	@ 0x30
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	a808      	add	r0, sp, #32
 8000e2e:	f001 f96c 	bl	800210a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e32:	2300      	movs	r3, #0
 8000e34:	9303      	str	r3, [sp, #12]
 8000e36:	9304      	str	r3, [sp, #16]
 8000e38:	9305      	str	r3, [sp, #20]
 8000e3a:	9306      	str	r3, [sp, #24]
 8000e3c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec0 <SystemClock_Config+0x9c>)
 8000e42:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000e44:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000e48:	6411      	str	r1, [r2, #64]	@ 0x40
 8000e4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000e4c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000e50:	9201      	str	r2, [sp, #4]
 8000e52:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	491b      	ldr	r1, [pc, #108]	@ (8000ec4 <SystemClock_Config+0xa0>)
 8000e58:	680a      	ldr	r2, [r1, #0]
 8000e5a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e62:	600a      	str	r2, [r1, #0]
 8000e64:	680a      	ldr	r2, [r1, #0]
 8000e66:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000e6a:	9202      	str	r2, [sp, #8]
 8000e6c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6e:	2202      	movs	r2, #2
 8000e70:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	2101      	movs	r1, #1
 8000e74:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e76:	2110      	movs	r1, #16
 8000e78:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000e82:	2350      	movs	r3, #80	@ 0x50
 8000e84:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e86:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	a808      	add	r0, sp, #32
 8000e8e:	f000 fa8f 	bl	80013b0 <HAL_RCC_OscConfig>
 8000e92:	b980      	cbnz	r0, 8000eb6 <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	2102      	movs	r1, #2
 8000e9a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ea4:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea8:	a803      	add	r0, sp, #12
 8000eaa:	f000 fceb 	bl	8001884 <HAL_RCC_ClockConfig>
 8000eae:	b920      	cbnz	r0, 8000eba <SystemClock_Config+0x96>
}
 8000eb0:	b015      	add	sp, #84	@ 0x54
 8000eb2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000eb6:	f7ff ff4b 	bl	8000d50 <Error_Handler>
    Error_Handler();
 8000eba:	f7ff ff49 	bl	8000d50 <Error_Handler>
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <main>:
{
 8000ec8:	b508      	push	{r3, lr}
  HAL_Init();
 8000eca:	f000 f837 	bl	8000f3c <HAL_Init>
  SystemClock_Config();
 8000ece:	f7ff ffa9 	bl	8000e24 <SystemClock_Config>
  MX_GPIO_Init();
 8000ed2:	f7ff fe41 	bl	8000b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ed6:	f7ff ff3d 	bl	8000d54 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000eda:	f7ff ff55 	bl	8000d88 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000ede:	f7ff ff87 	bl	8000df0 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start(&htim2);
 8000ee2:	4802      	ldr	r0, [pc, #8]	@ (8000eec <main+0x24>)
 8000ee4:	f000 fdd4 	bl	8001a90 <HAL_TIM_Base_Start>
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x20>
 8000eea:	bf00      	nop
 8000eec:	200000bc 	.word	0x200000bc

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_InitTick+0x40>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_InitTick+0x44>)
 8000f02:	6810      	ldr	r0, [r2, #0]
 8000f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f08:	f000 f8ac 	bl	8001064 <HAL_SYSTICK_Config>
 8000f0c:	b968      	cbnz	r0, 8000f2a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	2c0f      	cmp	r4, #15
 8000f10:	d901      	bls.n	8000f16 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
 8000f14:	e00a      	b.n	8000f2c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f16:	2200      	movs	r2, #0
 8000f18:	4621      	mov	r1, r4
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	f000 f88d 	bl	800103c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_InitTick+0x48>)
 8000f24:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
}
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_Init>:
{
 8000f3c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_Init+0x30>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f46:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f56:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f85d 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ffc6 	bl	8000ef0 <HAL_InitTick>
  HAL_MspInit();
 8000f64:	f000 f98a 	bl	800127c <HAL_MspInit>
}
 8000f68:	2000      	movs	r0, #0
 8000f6a:	bd08      	pop	{r3, pc}
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f70:	4a03      	ldr	r2, [pc, #12]	@ (8000f80 <HAL_IncTick+0x10>)
 8000f72:	6811      	ldr	r1, [r2, #0]
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <HAL_IncTick+0x14>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	440b      	add	r3, r1
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000130 	.word	0x20000130
 8000f84:	20000000 	.word	0x20000000

08000f88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f88:	4b01      	ldr	r3, [pc, #4]	@ (8000f90 <HAL_GetTick+0x8>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000130 	.word	0x20000130

08000f94 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000f94:	2800      	cmp	r0, #0
 8000f96:	db07      	blt.n	8000fa8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f98:	f000 021f 	and.w	r2, r0, #31
 8000f9c:	0940      	lsrs	r0, r0, #5
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	4a02      	ldr	r2, [pc, #8]	@ (8000fac <__NVIC_EnableIRQ+0x18>)
 8000fa4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	db08      	blt.n	8000fc6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	0109      	lsls	r1, r1, #4
 8000fb6:	b2c9      	uxtb	r1, r1
 8000fb8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000fbc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000fc0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000fc4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	f000 000f 	and.w	r0, r0, #15
 8000fca:	0109      	lsls	r1, r1, #4
 8000fcc:	b2c9      	uxtb	r1, r1
 8000fce:	4b01      	ldr	r3, [pc, #4]	@ (8000fd4 <__NVIC_SetPriority+0x24>)
 8000fd0:	5419      	strb	r1, [r3, r0]
  }
}
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed14 	.word	0xe000ed14

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fda:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fde:	f1c0 0c07 	rsb	ip, r0, #7
 8000fe2:	f1bc 0f04 	cmp.w	ip, #4
 8000fe6:	bf28      	it	cs
 8000fe8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fec:	1d03      	adds	r3, r0, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d90f      	bls.n	8001012 <NVIC_EncodePriority+0x3a>
 8000ff2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 3eff 	mov.w	lr, #4294967295
 8000ff8:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ffc:	ea21 0100 	bic.w	r1, r1, r0
 8001000:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001002:	fa0e fe03 	lsl.w	lr, lr, r3
 8001006:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800100a:	ea41 0002 	orr.w	r0, r1, r2
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	2300      	movs	r3, #0
 8001014:	e7ee      	b.n	8000ff4 <NVIC_EncodePriority+0x1c>
	...

08001018 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800101a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001020:	041b      	lsls	r3, r3, #16
 8001022:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	0200      	lsls	r0, r0, #8
 8001026:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001034:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103c:	b510      	push	{r4, lr}
 800103e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_NVIC_SetPriority+0x1c>)
 8001042:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001044:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001048:	f7ff ffc6 	bl	8000fd8 <NVIC_EncodePriority>
 800104c:	4601      	mov	r1, r0
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff ffae 	bl	8000fb0 <__NVIC_SetPriority>
}
 8001054:	bd10      	pop	{r4, pc}
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105e:	f7ff ff99 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001062:	bd08      	pop	{r3, pc}

08001064 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	3801      	subs	r0, #1
 8001066:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800106a:	d20b      	bcs.n	8001084 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001070:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <HAL_SYSTICK_Config+0x24>)
 8001074:	21f0      	movs	r1, #240	@ 0xf0
 8001076:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107a:	2000      	movs	r0, #0
 800107c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	2207      	movs	r2, #7
 8001080:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001082:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001084:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108c:	2300      	movs	r3, #0
 800108e:	2b0f      	cmp	r3, #15
 8001090:	f200 80d7 	bhi.w	8001242 <HAL_GPIO_Init+0x1b6>
{
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	e065      	b.n	8001166 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80010a0:	2403      	movs	r4, #3
 80010a2:	fa04 f40e 	lsl.w	r4, r4, lr
 80010a6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010aa:	68cc      	ldr	r4, [r1, #12]
 80010ac:	fa04 f40e 	lsl.w	r4, r4, lr
 80010b0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80010b2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	684a      	ldr	r2, [r1, #4]
 80010bc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80010c0:	409a      	lsls	r2, r3
 80010c2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80010c4:	6042      	str	r2, [r0, #4]
 80010c6:	e05c      	b.n	8001182 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	08dc      	lsrs	r4, r3, #3
 80010ca:	3408      	adds	r4, #8
 80010cc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d0:	f003 0507 	and.w	r5, r3, #7
 80010d4:	00ad      	lsls	r5, r5, #2
 80010d6:	f04f 0e0f 	mov.w	lr, #15
 80010da:	fa0e fe05 	lsl.w	lr, lr, r5
 80010de:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e2:	690a      	ldr	r2, [r1, #16]
 80010e4:	40aa      	lsls	r2, r5
 80010e6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80010ee:	e05c      	b.n	80011aa <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f0:	2204      	movs	r2, #4
 80010f2:	e000      	b.n	80010f6 <HAL_GPIO_Init+0x6a>
 80010f4:	2200      	movs	r2, #0
 80010f6:	fa02 f20e 	lsl.w	r2, r2, lr
 80010fa:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010fc:	3402      	adds	r4, #2
 80010fe:	4d51      	ldr	r5, [pc, #324]	@ (8001244 <HAL_GPIO_Init+0x1b8>)
 8001100:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001104:	4a50      	ldr	r2, [pc, #320]	@ (8001248 <HAL_GPIO_Init+0x1bc>)
 8001106:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001108:	ea6f 020c 	mvn.w	r2, ip
 800110c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001110:	684e      	ldr	r6, [r1, #4]
 8001112:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001116:	d001      	beq.n	800111c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001118:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800111c:	4c4a      	ldr	r4, [pc, #296]	@ (8001248 <HAL_GPIO_Init+0x1bc>)
 800111e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001120:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001122:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001126:	684e      	ldr	r6, [r1, #4]
 8001128:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 800112c:	d001      	beq.n	8001132 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800112e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001132:	4c45      	ldr	r4, [pc, #276]	@ (8001248 <HAL_GPIO_Init+0x1bc>)
 8001134:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001136:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001138:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113c:	684e      	ldr	r6, [r1, #4]
 800113e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001142:	d001      	beq.n	8001148 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001144:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001148:	4c3f      	ldr	r4, [pc, #252]	@ (8001248 <HAL_GPIO_Init+0x1bc>)
 800114a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800114e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001150:	684d      	ldr	r5, [r1, #4]
 8001152:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001156:	d001      	beq.n	800115c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001158:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800115c:	4c3a      	ldr	r4, [pc, #232]	@ (8001248 <HAL_GPIO_Init+0x1bc>)
 800115e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001160:	3301      	adds	r3, #1
 8001162:	2b0f      	cmp	r3, #15
 8001164:	d86b      	bhi.n	800123e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001166:	2201      	movs	r2, #1
 8001168:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	680c      	ldr	r4, [r1, #0]
 800116c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001170:	ea32 0404 	bics.w	r4, r2, r4
 8001174:	d1f4      	bne.n	8001160 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	684c      	ldr	r4, [r1, #4]
 8001178:	f004 0403 	and.w	r4, r4, #3
 800117c:	3c01      	subs	r4, #1
 800117e:	2c01      	cmp	r4, #1
 8001180:	d98b      	bls.n	800109a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001182:	684a      	ldr	r2, [r1, #4]
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	2a03      	cmp	r2, #3
 800118a:	d009      	beq.n	80011a0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800118c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118e:	005d      	lsls	r5, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	40aa      	lsls	r2, r5
 8001194:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001198:	688a      	ldr	r2, [r1, #8]
 800119a:	40aa      	lsls	r2, r5
 800119c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800119e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	684a      	ldr	r2, [r1, #4]
 80011a2:	f002 0203 	and.w	r2, r2, #3
 80011a6:	2a02      	cmp	r2, #2
 80011a8:	d08e      	beq.n	80010c8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80011aa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ac:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f20e 	lsl.w	r2, r2, lr
 80011b6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ba:	684a      	ldr	r2, [r1, #4]
 80011bc:	f002 0203 	and.w	r2, r2, #3
 80011c0:	fa02 f20e 	lsl.w	r2, r2, lr
 80011c4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80011c6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c8:	684a      	ldr	r2, [r1, #4]
 80011ca:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80011ce:	d0c7      	beq.n	8001160 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	2200      	movs	r2, #0
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <HAL_GPIO_Init+0x1c0>)
 80011d6:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80011d8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80011dc:	6454      	str	r4, [r2, #68]	@ 0x44
 80011de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80011e0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80011e4:	9201      	str	r2, [sp, #4]
 80011e6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80011e8:	089c      	lsrs	r4, r3, #2
 80011ea:	1ca5      	adds	r5, r4, #2
 80011ec:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <HAL_GPIO_Init+0x1b8>)
 80011ee:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f2:	f003 0e03 	and.w	lr, r3, #3
 80011f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f20e 	lsl.w	r2, r2, lr
 8001200:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <HAL_GPIO_Init+0x1c4>)
 8001206:	4290      	cmp	r0, r2
 8001208:	f43f af74 	beq.w	80010f4 <HAL_GPIO_Init+0x68>
 800120c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001210:	4290      	cmp	r0, r2
 8001212:	d00e      	beq.n	8001232 <HAL_GPIO_Init+0x1a6>
 8001214:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001218:	4290      	cmp	r0, r2
 800121a:	d00c      	beq.n	8001236 <HAL_GPIO_Init+0x1aa>
 800121c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001220:	4290      	cmp	r0, r2
 8001222:	d00a      	beq.n	800123a <HAL_GPIO_Init+0x1ae>
 8001224:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001228:	4290      	cmp	r0, r2
 800122a:	f43f af61 	beq.w	80010f0 <HAL_GPIO_Init+0x64>
 800122e:	2207      	movs	r2, #7
 8001230:	e761      	b.n	80010f6 <HAL_GPIO_Init+0x6a>
 8001232:	2201      	movs	r2, #1
 8001234:	e75f      	b.n	80010f6 <HAL_GPIO_Init+0x6a>
 8001236:	2202      	movs	r2, #2
 8001238:	e75d      	b.n	80010f6 <HAL_GPIO_Init+0x6a>
 800123a:	2203      	movs	r2, #3
 800123c:	e75b      	b.n	80010f6 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800123e:	b002      	add	sp, #8
 8001240:	bd70      	pop	{r4, r5, r6, pc}
 8001242:	4770      	bx	lr
 8001244:	40013800 	.word	0x40013800
 8001248:	40013c00 	.word	0x40013c00
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	b10a      	cbz	r2, 800125a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	6181      	str	r1, [r0, #24]
 8001258:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	0409      	lsls	r1, r1, #16
 800125c:	6181      	str	r1, [r0, #24]
  }
}
 800125e:	4770      	bx	lr

08001260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001260:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001262:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4203      	tst	r3, r0
 8001268:	d100      	bne.n	800126c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800126a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800126c:	4b02      	ldr	r3, [pc, #8]	@ (8001278 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800126e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001270:	f7ff fcda 	bl	8000c28 <HAL_GPIO_EXTI_Callback>
}
 8001274:	e7f9      	b.n	800126a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001276:	bf00      	nop
 8001278:	40013c00 	.word	0x40013c00

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2100      	movs	r1, #0
 8001280:	9100      	str	r1, [sp, #0]
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_MspInit+0x34>)
 8001284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001286:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800128a:	645a      	str	r2, [r3, #68]	@ 0x44
 800128c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800128e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	9101      	str	r1, [sp, #4]
 8001298:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800129a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800129e:	641a      	str	r2, [r3, #64]	@ 0x40
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	b002      	add	sp, #8
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80012b4:	6803      	ldr	r3, [r0, #0]
 80012b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ba:	d000      	beq.n	80012be <HAL_TIM_Base_MspInit+0xa>
 80012bc:	4770      	bx	lr
{
 80012be:	b500      	push	{lr}
 80012c0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	2100      	movs	r1, #0
 80012c4:	9101      	str	r1, [sp, #4]
 80012c6:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80012ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012cc:	f042 0201 	orr.w	r2, r2, #1
 80012d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012dc:	460a      	mov	r2, r1
 80012de:	201c      	movs	r0, #28
 80012e0:	f7ff feac 	bl	800103c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e4:	201c      	movs	r0, #28
 80012e6:	f7ff feb9 	bl	800105c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012ea:	b003      	add	sp, #12
 80012ec:	f85d fb04 	ldr.w	pc, [sp], #4

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b500      	push	{lr}
 80012f2:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	2300      	movs	r3, #0
 80012f6:	9305      	str	r3, [sp, #20]
 80012f8:	9306      	str	r3, [sp, #24]
 80012fa:	9307      	str	r3, [sp, #28]
 80012fc:	9308      	str	r3, [sp, #32]
 80012fe:	9309      	str	r3, [sp, #36]	@ 0x24
  if(huart->Instance==USART1)
 8001300:	6803      	ldr	r3, [r0, #0]
 8001302:	4a27      	ldr	r2, [pc, #156]	@ (80013a0 <HAL_UART_MspInit+0xb0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d005      	beq.n	8001314 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001308:	4a26      	ldr	r2, [pc, #152]	@ (80013a4 <HAL_UART_MspInit+0xb4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d026      	beq.n	800135c <HAL_UART_MspInit+0x6c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800130e:	b00b      	add	sp, #44	@ 0x2c
 8001310:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001314:	2100      	movs	r1, #0
 8001316:	9101      	str	r1, [sp, #4]
 8001318:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <HAL_UART_MspInit+0xb8>)
 800131a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800131c:	f042 0210 	orr.w	r2, r2, #16
 8001320:	645a      	str	r2, [r3, #68]	@ 0x44
 8001322:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001324:	f002 0210 	and.w	r2, r2, #16
 8001328:	9201      	str	r2, [sp, #4]
 800132a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	9102      	str	r1, [sp, #8]
 800132e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001330:	f042 0201 	orr.w	r2, r2, #1
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001340:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001344:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800134e:	2307      	movs	r3, #7
 8001350:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	a905      	add	r1, sp, #20
 8001354:	4815      	ldr	r0, [pc, #84]	@ (80013ac <HAL_UART_MspInit+0xbc>)
 8001356:	f7ff fe99 	bl	800108c <HAL_GPIO_Init>
 800135a:	e7d8      	b.n	800130e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800135c:	2100      	movs	r1, #0
 800135e:	9103      	str	r1, [sp, #12]
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_UART_MspInit+0xb8>)
 8001362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001364:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
 800136a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800136c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001370:	9203      	str	r2, [sp, #12]
 8001372:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	9104      	str	r1, [sp, #16]
 8001376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	9304      	str	r3, [sp, #16]
 8001386:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001388:	230c      	movs	r3, #12
 800138a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001390:	2307      	movs	r3, #7
 8001392:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	a905      	add	r1, sp, #20
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <HAL_UART_MspInit+0xbc>)
 8001398:	f7ff fe78 	bl	800108c <HAL_GPIO_Init>
}
 800139c:	e7b7      	b.n	800130e <HAL_UART_MspInit+0x1e>
 800139e:	bf00      	nop
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b0:	2800      	cmp	r0, #0
 80013b2:	f000 81e0 	beq.w	8001776 <HAL_RCC_OscConfig+0x3c6>
{
 80013b6:	b570      	push	{r4, r5, r6, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013bc:	6803      	ldr	r3, [r0, #0]
 80013be:	f013 0f01 	tst.w	r3, #1
 80013c2:	d03b      	beq.n	800143c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013c4:	4b9f      	ldr	r3, [pc, #636]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d02c      	beq.n	800142a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d021      	beq.n	8001420 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	6863      	ldr	r3, [r4, #4]
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e2:	d04f      	beq.n	8001484 <HAL_RCC_OscConfig+0xd4>
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013e8:	d052      	beq.n	8001490 <HAL_RCC_OscConfig+0xe0>
 80013ea:	4b96      	ldr	r3, [pc, #600]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80013fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013fc:	6863      	ldr	r3, [r4, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d050      	beq.n	80014a4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff fdc1 	bl	8000f88 <HAL_GetTick>
 8001406:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001408:	4b8e      	ldr	r3, [pc, #568]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001410:	d114      	bne.n	800143c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001412:	f7ff fdb9 	bl	8000f88 <HAL_GetTick>
 8001416:	1b40      	subs	r0, r0, r5
 8001418:	2864      	cmp	r0, #100	@ 0x64
 800141a:	d9f5      	bls.n	8001408 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800141c:	2003      	movs	r0, #3
 800141e:	e1b1      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001420:	4b88      	ldr	r3, [pc, #544]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001428:	d0d8      	beq.n	80013dc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142a:	4b86      	ldr	r3, [pc, #536]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001432:	d003      	beq.n	800143c <HAL_RCC_OscConfig+0x8c>
 8001434:	6863      	ldr	r3, [r4, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 819f 	beq.w	800177a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	f013 0f02 	tst.w	r3, #2
 8001442:	d054      	beq.n	80014ee <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001444:	4b7f      	ldr	r3, [pc, #508]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f013 0f0c 	tst.w	r3, #12
 800144c:	d03e      	beq.n	80014cc <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144e:	4b7d      	ldr	r3, [pc, #500]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001456:	2b08      	cmp	r3, #8
 8001458:	d033      	beq.n	80014c2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800145a:	68e3      	ldr	r3, [r4, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d068      	beq.n	8001532 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <HAL_RCC_OscConfig+0x298>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff fd8f 	bl	8000f88 <HAL_GetTick>
 800146a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	4b75      	ldr	r3, [pc, #468]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f013 0f02 	tst.w	r3, #2
 8001474:	d154      	bne.n	8001520 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fd87 	bl	8000f88 <HAL_GetTick>
 800147a:	1b40      	subs	r0, r0, r5
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f5      	bls.n	800146c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e17f      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	4a6f      	ldr	r2, [pc, #444]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e7b5      	b.n	80013fc <HAL_RCC_OscConfig+0x4c>
 8001490:	4b6c      	ldr	r3, [pc, #432]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e7ab      	b.n	80013fc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80014a4:	f7ff fd70 	bl	8000f88 <HAL_GetTick>
 80014a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b66      	ldr	r3, [pc, #408]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80014b2:	d0c3      	beq.n	800143c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fd68 	bl	8000f88 <HAL_GetTick>
 80014b8:	1b40      	subs	r0, r0, r5
 80014ba:	2864      	cmp	r0, #100	@ 0x64
 80014bc:	d9f5      	bls.n	80014aa <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80014be:	2003      	movs	r0, #3
 80014c0:	e160      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c2:	4b60      	ldr	r3, [pc, #384]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80014ca:	d1c6      	bne.n	800145a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f013 0f02 	tst.w	r3, #2
 80014d4:	d003      	beq.n	80014de <HAL_RCC_OscConfig+0x12e>
 80014d6:	68e3      	ldr	r3, [r4, #12]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	f040 8150 	bne.w	800177e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4a59      	ldr	r2, [pc, #356]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80014e6:	6921      	ldr	r1, [r4, #16]
 80014e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014ec:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	f013 0f08 	tst.w	r3, #8
 80014f4:	d042      	beq.n	800157c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014f6:	6963      	ldr	r3, [r4, #20]
 80014f8:	b36b      	cbz	r3, 8001556 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <HAL_RCC_OscConfig+0x298>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fd41 	bl	8000f88 <HAL_GetTick>
 8001506:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001508:	4b4e      	ldr	r3, [pc, #312]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150c:	f013 0f02 	tst.w	r3, #2
 8001510:	d134      	bne.n	800157c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fd39 	bl	8000f88 <HAL_GetTick>
 8001516:	1b40      	subs	r0, r0, r5
 8001518:	2802      	cmp	r0, #2
 800151a:	d9f5      	bls.n	8001508 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800151c:	2003      	movs	r0, #3
 800151e:	e131      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4a48      	ldr	r2, [pc, #288]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001528:	6921      	ldr	r1, [r4, #16]
 800152a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e7dd      	b.n	80014ee <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b45      	ldr	r3, [pc, #276]	@ (8001648 <HAL_RCC_OscConfig+0x298>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001538:	f7ff fd26 	bl	8000f88 <HAL_GetTick>
 800153c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f013 0f02 	tst.w	r3, #2
 8001546:	d0d2      	beq.n	80014ee <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fd1e 	bl	8000f88 <HAL_GetTick>
 800154c:	1b40      	subs	r0, r0, r5
 800154e:	2802      	cmp	r0, #2
 8001550:	d9f5      	bls.n	800153e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001552:	2003      	movs	r0, #3
 8001554:	e116      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001556:	4b3c      	ldr	r3, [pc, #240]	@ (8001648 <HAL_RCC_OscConfig+0x298>)
 8001558:	2200      	movs	r2, #0
 800155a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fd13 	bl	8000f88 <HAL_GetTick>
 8001562:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001568:	f013 0f02 	tst.w	r3, #2
 800156c:	d006      	beq.n	800157c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fd0b 	bl	8000f88 <HAL_GetTick>
 8001572:	1b40      	subs	r0, r0, r5
 8001574:	2802      	cmp	r0, #2
 8001576:	d9f5      	bls.n	8001564 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001578:	2003      	movs	r0, #3
 800157a:	e103      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	f013 0f04 	tst.w	r3, #4
 8001582:	d077      	beq.n	8001674 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001584:	4b2f      	ldr	r3, [pc, #188]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800158c:	d133      	bne.n	80015f6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001596:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800159a:	641a      	str	r2, [r3, #64]	@ 0x40
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015a6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	4b28      	ldr	r3, [pc, #160]	@ (800164c <HAL_RCC_OscConfig+0x29c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015b0:	d023      	beq.n	80015fa <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b2:	68a3      	ldr	r3, [r4, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d034      	beq.n	8001622 <HAL_RCC_OscConfig+0x272>
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d038      	beq.n	800162e <HAL_RCC_OscConfig+0x27e>
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80015be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80015c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80015c8:	f022 0204 	bic.w	r2, r2, #4
 80015cc:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ce:	68a3      	ldr	r3, [r4, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d03d      	beq.n	8001650 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fcd8 	bl	8000f88 <HAL_GetTick>
 80015d8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015de:	f013 0f02 	tst.w	r3, #2
 80015e2:	d146      	bne.n	8001672 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff fcd0 	bl	8000f88 <HAL_GetTick>
 80015e8:	1b80      	subs	r0, r0, r6
 80015ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015ee:	4298      	cmp	r0, r3
 80015f0:	d9f3      	bls.n	80015da <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80015f2:	2003      	movs	r0, #3
 80015f4:	e0c6      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2500      	movs	r5, #0
 80015f8:	e7d6      	b.n	80015a8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4a14      	ldr	r2, [pc, #80]	@ (800164c <HAL_RCC_OscConfig+0x29c>)
 80015fc:	6813      	ldr	r3, [r2, #0]
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001604:	f7ff fcc0 	bl	8000f88 <HAL_GetTick>
 8001608:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_RCC_OscConfig+0x29c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001612:	d1ce      	bne.n	80015b2 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7ff fcb8 	bl	8000f88 <HAL_GetTick>
 8001618:	1b80      	subs	r0, r0, r6
 800161a:	2802      	cmp	r0, #2
 800161c:	d9f5      	bls.n	800160a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800161e:	2003      	movs	r0, #3
 8001620:	e0b0      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001624:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6713      	str	r3, [r2, #112]	@ 0x70
 800162c:	e7cf      	b.n	80015ce <HAL_RCC_OscConfig+0x21e>
 800162e:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_RCC_OscConfig+0x294>)
 8001630:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001632:	f042 0204 	orr.w	r2, r2, #4
 8001636:	671a      	str	r2, [r3, #112]	@ 0x70
 8001638:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001640:	e7c5      	b.n	80015ce <HAL_RCC_OscConfig+0x21e>
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	42470000 	.word	0x42470000
 800164c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fc9a 	bl	8000f88 <HAL_GetTick>
 8001654:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	4b52      	ldr	r3, [pc, #328]	@ (80017a0 <HAL_RCC_OscConfig+0x3f0>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165a:	f013 0f02 	tst.w	r3, #2
 800165e:	d008      	beq.n	8001672 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff fc92 	bl	8000f88 <HAL_GetTick>
 8001664:	1b80      	subs	r0, r0, r6
 8001666:	f241 3388 	movw	r3, #5000	@ 0x1388
 800166a:	4298      	cmp	r0, r3
 800166c:	d9f3      	bls.n	8001656 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800166e:	2003      	movs	r0, #3
 8001670:	e088      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001672:	b9ed      	cbnz	r5, 80016b0 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001674:	69a3      	ldr	r3, [r4, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8083 	beq.w	8001782 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800167c:	4a48      	ldr	r2, [pc, #288]	@ (80017a0 <HAL_RCC_OscConfig+0x3f0>)
 800167e:	6892      	ldr	r2, [r2, #8]
 8001680:	f002 020c 	and.w	r2, r2, #12
 8001684:	2a08      	cmp	r2, #8
 8001686:	d051      	beq.n	800172c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001688:	2b02      	cmp	r3, #2
 800168a:	d017      	beq.n	80016bc <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b45      	ldr	r3, [pc, #276]	@ (80017a4 <HAL_RCC_OscConfig+0x3f4>)
 800168e:	2200      	movs	r2, #0
 8001690:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fc79 	bl	8000f88 <HAL_GetTick>
 8001696:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	4b41      	ldr	r3, [pc, #260]	@ (80017a0 <HAL_RCC_OscConfig+0x3f0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016a0:	d042      	beq.n	8001728 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fc71 	bl	8000f88 <HAL_GetTick>
 80016a6:	1b00      	subs	r0, r0, r4
 80016a8:	2802      	cmp	r0, #2
 80016aa:	d9f5      	bls.n	8001698 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016ac:	2003      	movs	r0, #3
 80016ae:	e069      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4a3b      	ldr	r2, [pc, #236]	@ (80017a0 <HAL_RCC_OscConfig+0x3f0>)
 80016b2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80016b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ba:	e7db      	b.n	8001674 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <HAL_RCC_OscConfig+0x3f4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80016c2:	f7ff fc61 	bl	8000f88 <HAL_GetTick>
 80016c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c8:	4b35      	ldr	r3, [pc, #212]	@ (80017a0 <HAL_RCC_OscConfig+0x3f0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016d0:	d006      	beq.n	80016e0 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fc59 	bl	8000f88 <HAL_GetTick>
 80016d6:	1b40      	subs	r0, r0, r5
 80016d8:	2802      	cmp	r0, #2
 80016da:	d9f5      	bls.n	80016c8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80016dc:	2003      	movs	r0, #3
 80016de:	e051      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016e0:	69e3      	ldr	r3, [r4, #28]
 80016e2:	6a22      	ldr	r2, [r4, #32]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80016e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80016ee:	0852      	lsrs	r2, r2, #1
 80016f0:	3a01      	subs	r2, #1
 80016f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80016f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016fc:	4a28      	ldr	r2, [pc, #160]	@ (80017a0 <HAL_RCC_OscConfig+0x3f0>)
 80016fe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b28      	ldr	r3, [pc, #160]	@ (80017a4 <HAL_RCC_OscConfig+0x3f4>)
 8001702:	2201      	movs	r2, #1
 8001704:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001706:	f7ff fc3f 	bl	8000f88 <HAL_GetTick>
 800170a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <HAL_RCC_OscConfig+0x3f0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001714:	d106      	bne.n	8001724 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fc37 	bl	8000f88 <HAL_GetTick>
 800171a:	1b00      	subs	r0, r0, r4
 800171c:	2802      	cmp	r0, #2
 800171e:	d9f5      	bls.n	800170c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001720:	2003      	movs	r0, #3
 8001722:	e02f      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001724:	2000      	movs	r0, #0
 8001726:	e02d      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
 8001728:	2000      	movs	r0, #0
 800172a:	e02b      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	2b01      	cmp	r3, #1
 800172e:	d02b      	beq.n	8001788 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001730:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <HAL_RCC_OscConfig+0x3f0>)
 8001732:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001738:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173a:	4291      	cmp	r1, r2
 800173c:	d126      	bne.n	800178c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001742:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	428a      	cmp	r2, r1
 8001746:	d123      	bne.n	8001790 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001748:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800174e:	401a      	ands	r2, r3
 8001750:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001754:	d11e      	bne.n	8001794 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001756:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800175a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800175c:	0852      	lsrs	r2, r2, #1
 800175e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001760:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001766:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800176a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001770:	d114      	bne.n	800179c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001772:	2000      	movs	r0, #0
 8001774:	e006      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001776:	2001      	movs	r0, #1
}
 8001778:	4770      	bx	lr
        return HAL_ERROR;
 800177a:	2001      	movs	r0, #1
 800177c:	e002      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800177e:	2001      	movs	r0, #1
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001782:	2000      	movs	r0, #0
}
 8001784:	b002      	add	sp, #8
 8001786:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001788:	2001      	movs	r0, #1
 800178a:	e7fb      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
 800178e:	e7f9      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
 8001790:	2001      	movs	r0, #1
 8001792:	e7f7      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
 8001794:	2001      	movs	r0, #1
 8001796:	e7f5      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
 8001798:	2001      	movs	r0, #1
 800179a:	e7f3      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
 800179c:	2001      	movs	r0, #1
 800179e:	e7f1      	b.n	8001784 <HAL_RCC_OscConfig+0x3d4>
 80017a0:	40023800 	.word	0x40023800
 80017a4:	42470000 	.word	0x42470000

080017a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017aa:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_RCC_GetSysClockFreq+0xd0>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d05b      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0xc6>
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d15b      	bne.n	8001872 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <HAL_RCC_GetSysClockFreq+0xd0>)
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80017c8:	d02c      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <HAL_RCC_GetSysClockFreq+0xd0>)
 80017cc:	6858      	ldr	r0, [r3, #4]
 80017ce:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80017d2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80017d6:	ebbc 0c00 	subs.w	ip, ip, r0
 80017da:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80017de:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80017e2:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80017e6:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80017ea:	ebb1 010c 	subs.w	r1, r1, ip
 80017ee:	eb63 030e 	sbc.w	r3, r3, lr
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017f8:	00c9      	lsls	r1, r1, #3
 80017fa:	eb11 0c00 	adds.w	ip, r1, r0
 80017fe:	f143 0300 	adc.w	r3, r3, #0
 8001802:	0259      	lsls	r1, r3, #9
 8001804:	2300      	movs	r3, #0
 8001806:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800180a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800180e:	f7ff f969 	bl	8000ae4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800181a:	3301      	adds	r3, #1
 800181c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800181e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001822:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001826:	6858      	ldr	r0, [r3, #4]
 8001828:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800182c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001830:	ebbc 0c00 	subs.w	ip, ip, r0
 8001834:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001838:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800183c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001840:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001844:	ebb1 010c 	subs.w	r1, r1, ip
 8001848:	eb63 030e 	sbc.w	r3, r3, lr
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001852:	00c9      	lsls	r1, r1, #3
 8001854:	eb11 0c00 	adds.w	ip, r1, r0
 8001858:	f143 0300 	adc.w	r3, r3, #0
 800185c:	0299      	lsls	r1, r3, #10
 800185e:	2300      	movs	r3, #0
 8001860:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001864:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001868:	f7ff f93c 	bl	8000ae4 <__aeabi_uldivmod>
 800186c:	e7d1      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800186e:	4803      	ldr	r0, [pc, #12]	@ (800187c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001870:	e7d7      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001872:	4803      	ldr	r0, [pc, #12]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8001874:	e7d5      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x7a>
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	007a1200 	.word	0x007a1200
 8001880:	00f42400 	.word	0x00f42400

08001884 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001884:	2800      	cmp	r0, #0
 8001886:	f000 809b 	beq.w	80019c0 <HAL_RCC_ClockConfig+0x13c>
{
 800188a:	b570      	push	{r4, r5, r6, lr}
 800188c:	460d      	mov	r5, r1
 800188e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b4f      	ldr	r3, [pc, #316]	@ (80019d0 <HAL_RCC_ClockConfig+0x14c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	428b      	cmp	r3, r1
 800189a:	d208      	bcs.n	80018ae <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189c:	b2cb      	uxtb	r3, r1
 800189e:	4a4c      	ldr	r2, [pc, #304]	@ (80019d0 <HAL_RCC_ClockConfig+0x14c>)
 80018a0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	428b      	cmp	r3, r1
 80018aa:	f040 808b 	bne.w	80019c4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	f013 0f02 	tst.w	r3, #2
 80018b4:	d017      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b6:	f013 0f04 	tst.w	r3, #4
 80018ba:	d004      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018bc:	4a45      	ldr	r2, [pc, #276]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 80018be:	6893      	ldr	r3, [r2, #8]
 80018c0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018c4:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	f013 0f08 	tst.w	r3, #8
 80018cc:	d004      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ce:	4a41      	ldr	r2, [pc, #260]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 80018d0:	6893      	ldr	r3, [r2, #8]
 80018d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018d6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4a3e      	ldr	r2, [pc, #248]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 80018da:	6893      	ldr	r3, [r2, #8]
 80018dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018e0:	68a1      	ldr	r1, [r4, #8]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	f013 0f01 	tst.w	r3, #1
 80018ec:	d032      	beq.n	8001954 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	6863      	ldr	r3, [r4, #4]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d021      	beq.n	8001938 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f4:	1e9a      	subs	r2, r3, #2
 80018f6:	2a01      	cmp	r2, #1
 80018f8:	d925      	bls.n	8001946 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4a36      	ldr	r2, [pc, #216]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	f012 0f02 	tst.w	r2, #2
 8001902:	d061      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001904:	4933      	ldr	r1, [pc, #204]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 8001906:	688a      	ldr	r2, [r1, #8]
 8001908:	f022 0203 	bic.w	r2, r2, #3
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001910:	f7ff fb3a 	bl	8000f88 <HAL_GetTick>
 8001914:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	6862      	ldr	r2, [r4, #4]
 8001920:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001924:	d016      	beq.n	8001954 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001926:	f7ff fb2f 	bl	8000f88 <HAL_GetTick>
 800192a:	1b80      	subs	r0, r0, r6
 800192c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001930:	4298      	cmp	r0, r3
 8001932:	d9f0      	bls.n	8001916 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001934:	2003      	movs	r0, #3
 8001936:	e042      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001938:	4a26      	ldr	r2, [pc, #152]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001940:	d1e0      	bne.n	8001904 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
 8001944:	e03b      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4a23      	ldr	r2, [pc, #140]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800194e:	d1d9      	bne.n	8001904 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001950:	2001      	movs	r0, #1
 8001952:	e034      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_RCC_ClockConfig+0x14c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	42ab      	cmp	r3, r5
 800195e:	d907      	bls.n	8001970 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001960:	b2ea      	uxtb	r2, r5
 8001962:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <HAL_RCC_ClockConfig+0x14c>)
 8001964:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	42ab      	cmp	r3, r5
 800196e:	d12d      	bne.n	80019cc <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f013 0f04 	tst.w	r3, #4
 8001976:	d006      	beq.n	8001986 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 800197a:	6893      	ldr	r3, [r2, #8]
 800197c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001980:	68e1      	ldr	r1, [r4, #12]
 8001982:	430b      	orrs	r3, r1
 8001984:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	f013 0f08 	tst.w	r3, #8
 800198c:	d007      	beq.n	800199e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198e:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 8001990:	6893      	ldr	r3, [r2, #8]
 8001992:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001996:	6921      	ldr	r1, [r4, #16]
 8001998:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800199c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800199e:	f7ff ff03 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_RCC_ClockConfig+0x150>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019aa:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <HAL_RCC_ClockConfig+0x154>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	40d8      	lsrs	r0, r3
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_RCC_ClockConfig+0x158>)
 80019b2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_RCC_ClockConfig+0x15c>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	f7ff fa9a 	bl	8000ef0 <HAL_InitTick>
  return HAL_OK;
 80019bc:	2000      	movs	r0, #0
}
 80019be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
}
 80019c2:	4770      	bx	lr
      return HAL_ERROR;
 80019c4:	2001      	movs	r0, #1
 80019c6:	e7fa      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
 80019ca:	e7f8      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
 80019ce:	e7f6      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
 80019d0:	40023c00 	.word	0x40023c00
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08002440 	.word	0x08002440
 80019dc:	20000008 	.word	0x20000008
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80019e4:	4b01      	ldr	r3, [pc, #4]	@ (80019ec <HAL_RCC_GetHCLKFreq+0x8>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f2:	f7ff fff7 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 80019f6:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80019fe:	4a03      	ldr	r2, [pc, #12]	@ (8001a0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a02:	40d8      	lsrs	r0, r3
 8001a04:	bd08      	pop	{r3, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08002438 	.word	0x08002438

08001a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a12:	f7ff ffe7 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a16:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a1e:	4a03      	ldr	r2, [pc, #12]	@ (8001a2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a22:	40d8      	lsrs	r0, r3
 8001a24:	bd08      	pop	{r3, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	08002438 	.word	0x08002438

08001a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a30:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a32:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a34:	6a04      	ldr	r4, [r0, #32]
 8001a36:	f024 0401 	bic.w	r4, r4, #1
 8001a3a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a3c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a3e:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a42:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a46:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001a4a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a4c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a4e:	6203      	str	r3, [r0, #32]
}
 8001a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a56:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001a58:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a5a:	6a04      	ldr	r4, [r0, #32]
 8001a5c:	f024 0410 	bic.w	r4, r4, #16
 8001a60:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a62:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a64:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a68:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a70:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a74:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a76:	6203      	str	r3, [r0, #32]
}
 8001a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a7e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a84:	430b      	orrs	r3, r1
 8001a86:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a8a:	6083      	str	r3, [r0, #8]
}
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001a90:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d12a      	bne.n	8001af0 <HAL_TIM_Base_Start+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa0:	6803      	ldr	r3, [r0, #0]
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <HAL_TIM_Base_Start+0x68>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d018      	beq.n	8001ada <HAL_TIM_Base_Start+0x4a>
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aac:	d015      	beq.n	8001ada <HAL_TIM_Base_Start+0x4a>
 8001aae:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d011      	beq.n	8001ada <HAL_TIM_Base_Start+0x4a>
 8001ab6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_TIM_Base_Start+0x4a>
 8001abe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d009      	beq.n	8001ada <HAL_TIM_Base_Start+0x4a>
 8001ac6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d005      	beq.n	8001ada <HAL_TIM_Base_Start+0x4a>
    __HAL_TIM_ENABLE(htim);
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae0:	2a06      	cmp	r2, #6
 8001ae2:	d007      	beq.n	8001af4 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
 8001aee:	4770      	bx	lr
    return HAL_ERROR;
 8001af0:	2001      	movs	r0, #1
 8001af2:	4770      	bx	lr
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
}
 8001af6:	4770      	bx	lr
 8001af8:	40010000 	.word	0x40010000

08001afc <HAL_TIM_PeriodElapsedCallback>:
}
 8001afc:	4770      	bx	lr

08001afe <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001afe:	4770      	bx	lr

08001b00 <HAL_TIM_IC_CaptureCallback>:
}
 8001b00:	4770      	bx	lr

08001b02 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001b02:	4770      	bx	lr

08001b04 <HAL_TIM_TriggerCallback>:
}
 8001b04:	4770      	bx	lr

08001b06 <HAL_TIM_IRQHandler>:
{
 8001b06:	b570      	push	{r4, r5, r6, lr}
 8001b08:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8001b0a:	6803      	ldr	r3, [r0, #0]
 8001b0c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b0e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b10:	f015 0f02 	tst.w	r5, #2
 8001b14:	d010      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b16:	f016 0f02 	tst.w	r6, #2
 8001b1a:	d00d      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b1c:	f06f 0202 	mvn.w	r2, #2
 8001b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b26:	6803      	ldr	r3, [r0, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f013 0f03 	tst.w	r3, #3
 8001b2e:	d05e      	beq.n	8001bee <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8001b30:	f7ff ffe6 	bl	8001b00 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b34:	2300      	movs	r3, #0
 8001b36:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b38:	f015 0f04 	tst.w	r5, #4
 8001b3c:	d012      	beq.n	8001b64 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b3e:	f016 0f04 	tst.w	r6, #4
 8001b42:	d00f      	beq.n	8001b64 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	f06f 0204 	mvn.w	r2, #4
 8001b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001b58:	d04f      	beq.n	8001bfa <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff ffd0 	bl	8001b00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b60:	2300      	movs	r3, #0
 8001b62:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b64:	f015 0f08 	tst.w	r5, #8
 8001b68:	d012      	beq.n	8001b90 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b6a:	f016 0f08 	tst.w	r6, #8
 8001b6e:	d00f      	beq.n	8001b90 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f06f 0208 	mvn.w	r2, #8
 8001b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f013 0f03 	tst.w	r3, #3
 8001b84:	d040      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff ffba 	bl	8001b00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b90:	f015 0f10 	tst.w	r5, #16
 8001b94:	d012      	beq.n	8001bbc <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b96:	f016 0f10 	tst.w	r6, #16
 8001b9a:	d00f      	beq.n	8001bbc <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	f06f 0210 	mvn.w	r2, #16
 8001ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001bb0:	d031      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff ffa4 	bl	8001b00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bbc:	f015 0f01 	tst.w	r5, #1
 8001bc0:	d002      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bc2:	f016 0f01 	tst.w	r6, #1
 8001bc6:	d12d      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bc8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001bcc:	d002      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bce:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001bd2:	d12f      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bd4:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001bd8:	d002      	beq.n	8001be0 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bda:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001bde:	d131      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001be0:	f015 0f20 	tst.w	r5, #32
 8001be4:	d002      	beq.n	8001bec <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001be6:	f016 0f20 	tst.w	r6, #32
 8001bea:	d133      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x14e>
}
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	f7ff ff86 	bl	8001afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff ff85 	bl	8001b02 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bf8:	e79c      	b.n	8001b34 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff ff7f 	bl	8001afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff ff7e 	bl	8001b02 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c06:	e7ab      	b.n	8001b60 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f7ff ff78 	bl	8001afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f7ff ff77 	bl	8001b02 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c14:	e7ba      	b.n	8001b8c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff ff71 	bl	8001afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff ff70 	bl	8001b02 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c22:	e7c9      	b.n	8001bb8 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	f06f 0201 	mvn.w	r2, #1
 8001c2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff ff65 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
 8001c32:	e7c9      	b.n	8001bc8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f000 f95e 	bl	8001efe <HAL_TIMEx_BreakCallback>
 8001c42:	e7c7      	b.n	8001bd4 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7ff ff59 	bl	8001b04 <HAL_TIM_TriggerCallback>
 8001c52:	e7c5      	b.n	8001be0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	f06f 0220 	mvn.w	r2, #32
 8001c5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f000 f94d 	bl	8001efc <HAL_TIMEx_CommutCallback>
}
 8001c62:	e7c3      	b.n	8001bec <HAL_TIM_IRQHandler+0xe6>

08001c64 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001c64:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c66:	4a29      	ldr	r2, [pc, #164]	@ (8001d0c <TIM_Base_SetConfig+0xa8>)
 8001c68:	4290      	cmp	r0, r2
 8001c6a:	d00e      	beq.n	8001c8a <TIM_Base_SetConfig+0x26>
 8001c6c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001c70:	d00b      	beq.n	8001c8a <TIM_Base_SetConfig+0x26>
 8001c72:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001c76:	4290      	cmp	r0, r2
 8001c78:	d007      	beq.n	8001c8a <TIM_Base_SetConfig+0x26>
 8001c7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c7e:	4290      	cmp	r0, r2
 8001c80:	d003      	beq.n	8001c8a <TIM_Base_SetConfig+0x26>
 8001c82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c86:	4290      	cmp	r0, r2
 8001c88:	d103      	bne.n	8001c92 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c8e:	684a      	ldr	r2, [r1, #4]
 8001c90:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <TIM_Base_SetConfig+0xa8>)
 8001c94:	4290      	cmp	r0, r2
 8001c96:	d01a      	beq.n	8001cce <TIM_Base_SetConfig+0x6a>
 8001c98:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001c9c:	d017      	beq.n	8001cce <TIM_Base_SetConfig+0x6a>
 8001c9e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001ca2:	4290      	cmp	r0, r2
 8001ca4:	d013      	beq.n	8001cce <TIM_Base_SetConfig+0x6a>
 8001ca6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001caa:	4290      	cmp	r0, r2
 8001cac:	d00f      	beq.n	8001cce <TIM_Base_SetConfig+0x6a>
 8001cae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cb2:	4290      	cmp	r0, r2
 8001cb4:	d00b      	beq.n	8001cce <TIM_Base_SetConfig+0x6a>
 8001cb6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001cba:	4290      	cmp	r0, r2
 8001cbc:	d007      	beq.n	8001cce <TIM_Base_SetConfig+0x6a>
 8001cbe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cc2:	4290      	cmp	r0, r2
 8001cc4:	d003      	beq.n	8001cce <TIM_Base_SetConfig+0x6a>
 8001cc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cca:	4290      	cmp	r0, r2
 8001ccc:	d103      	bne.n	8001cd6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd2:	68ca      	ldr	r2, [r1, #12]
 8001cd4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cda:	694a      	ldr	r2, [r1, #20]
 8001cdc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001cde:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ce0:	688b      	ldr	r3, [r1, #8]
 8001ce2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001ce4:	680b      	ldr	r3, [r1, #0]
 8001ce6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <TIM_Base_SetConfig+0xa8>)
 8001cea:	4298      	cmp	r0, r3
 8001cec:	d00a      	beq.n	8001d04 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cf2:	6903      	ldr	r3, [r0, #16]
 8001cf4:	f013 0f01 	tst.w	r3, #1
 8001cf8:	d003      	beq.n	8001d02 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cfa:	6903      	ldr	r3, [r0, #16]
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6103      	str	r3, [r0, #16]
}
 8001d02:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001d04:	690b      	ldr	r3, [r1, #16]
 8001d06:	6303      	str	r3, [r0, #48]	@ 0x30
 8001d08:	e7f1      	b.n	8001cee <TIM_Base_SetConfig+0x8a>
 8001d0a:	bf00      	nop
 8001d0c:	40010000 	.word	0x40010000

08001d10 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001d10:	b340      	cbz	r0, 8001d64 <HAL_TIM_Base_Init+0x54>
{
 8001d12:	b510      	push	{r4, lr}
 8001d14:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d16:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001d1a:	b1f3      	cbz	r3, 8001d5a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d22:	4621      	mov	r1, r4
 8001d24:	f851 0b04 	ldr.w	r0, [r1], #4
 8001d28:	f7ff ff9c 	bl	8001c64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d32:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001d36:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001d3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001d3e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d42:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d4a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001d4e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001d52:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001d56:	2000      	movs	r0, #0
}
 8001d58:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	f7ff faa9 	bl	80012b4 <HAL_TIM_Base_MspInit>
 8001d62:	e7db      	b.n	8001d1c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001d64:	2001      	movs	r0, #1
}
 8001d66:	4770      	bx	lr

08001d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d68:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d6a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d70:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001d74:	430a      	orrs	r2, r1
 8001d76:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d7a:	6082      	str	r2, [r0, #8]
}
 8001d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d82:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d078      	beq.n	8001e7c <HAL_TIM_ConfigClockSource+0xfa>
{
 8001d8a:	b510      	push	{r4, lr}
 8001d8c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d9a:	6802      	ldr	r2, [r0, #0]
 8001d9c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001da2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001da6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001da8:	680b      	ldr	r3, [r1, #0]
 8001daa:	2b60      	cmp	r3, #96	@ 0x60
 8001dac:	d04c      	beq.n	8001e48 <HAL_TIM_ConfigClockSource+0xc6>
 8001dae:	d823      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x76>
 8001db0:	2b40      	cmp	r3, #64	@ 0x40
 8001db2:	d054      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0xdc>
 8001db4:	d811      	bhi.n	8001dda <HAL_TIM_ConfigClockSource+0x58>
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x40>
 8001dba:	d80a      	bhi.n	8001dd2 <HAL_TIM_ConfigClockSource+0x50>
 8001dbc:	b10b      	cbz	r3, 8001dc2 <HAL_TIM_ConfigClockSource+0x40>
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d105      	bne.n	8001dce <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6820      	ldr	r0, [r4, #0]
 8001dc6:	f7ff fe5a 	bl	8001a7e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001dca:	2000      	movs	r0, #0
      break;
 8001dcc:	e028      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
 8001dd0:	e026      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001dd2:	2b30      	cmp	r3, #48	@ 0x30
 8001dd4:	d0f5      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	e022      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001dda:	2b50      	cmp	r3, #80	@ 0x50
 8001ddc:	d10a      	bne.n	8001df4 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dde:	68ca      	ldr	r2, [r1, #12]
 8001de0:	6849      	ldr	r1, [r1, #4]
 8001de2:	6800      	ldr	r0, [r0, #0]
 8001de4:	f7ff fe24 	bl	8001a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001de8:	2150      	movs	r1, #80	@ 0x50
 8001dea:	6820      	ldr	r0, [r4, #0]
 8001dec:	f7ff fe47 	bl	8001a7e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001df0:	2000      	movs	r0, #0
      break;
 8001df2:	e015      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
 8001df6:	e013      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dfc:	d03a      	beq.n	8001e74 <HAL_TIM_ConfigClockSource+0xf2>
 8001dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e02:	d014      	beq.n	8001e2e <HAL_TIM_ConfigClockSource+0xac>
 8001e04:	2b70      	cmp	r3, #112	@ 0x70
 8001e06:	d137      	bne.n	8001e78 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001e08:	68cb      	ldr	r3, [r1, #12]
 8001e0a:	684a      	ldr	r2, [r1, #4]
 8001e0c:	6889      	ldr	r1, [r1, #8]
 8001e0e:	6800      	ldr	r0, [r0, #0]
 8001e10:	f7ff ffaa 	bl	8001d68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001e1c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	2301      	movs	r3, #1
 8001e22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001e26:	2300      	movs	r3, #0
 8001e28:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001e2c:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8001e2e:	68cb      	ldr	r3, [r1, #12]
 8001e30:	684a      	ldr	r2, [r1, #4]
 8001e32:	6889      	ldr	r1, [r1, #8]
 8001e34:	6800      	ldr	r0, [r0, #0]
 8001e36:	f7ff ff97 	bl	8001d68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	6893      	ldr	r3, [r2, #8]
 8001e3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e42:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2000      	movs	r0, #0
      break;
 8001e46:	e7eb      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e48:	68ca      	ldr	r2, [r1, #12]
 8001e4a:	6849      	ldr	r1, [r1, #4]
 8001e4c:	6800      	ldr	r0, [r0, #0]
 8001e4e:	f7ff fe02 	bl	8001a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e52:	2160      	movs	r1, #96	@ 0x60
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	f7ff fe12 	bl	8001a7e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001e5a:	2000      	movs	r0, #0
      break;
 8001e5c:	e7e0      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e5e:	68ca      	ldr	r2, [r1, #12]
 8001e60:	6849      	ldr	r1, [r1, #4]
 8001e62:	6800      	ldr	r0, [r0, #0]
 8001e64:	f7ff fde4 	bl	8001a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e68:	2140      	movs	r1, #64	@ 0x40
 8001e6a:	6820      	ldr	r0, [r4, #0]
 8001e6c:	f7ff fe07 	bl	8001a7e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2000      	movs	r0, #0
      break;
 8001e72:	e7d5      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001e74:	2000      	movs	r0, #0
 8001e76:	e7d3      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001e78:	2001      	movs	r0, #1
 8001e7a:	e7d1      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8001e7c:	2002      	movs	r0, #2
}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e80:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001e84:	2a01      	cmp	r2, #1
 8001e86:	d035      	beq.n	8001ef4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8001e88:	b410      	push	{r4}
 8001e8a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e92:	2202      	movs	r2, #2
 8001e94:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e98:	6802      	ldr	r2, [r0, #0]
 8001e9a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e9c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e9e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ea2:	6808      	ldr	r0, [r1, #0]
 8001ea4:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ea8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4812      	ldr	r0, [pc, #72]	@ (8001ef8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001eae:	4282      	cmp	r2, r0
 8001eb0:	d012      	beq.n	8001ed8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001eb2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001eb6:	d00f      	beq.n	8001ed8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001eb8:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001ebc:	4282      	cmp	r2, r0
 8001ebe:	d00b      	beq.n	8001ed8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001ec0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001ec4:	4282      	cmp	r2, r0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001ec8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001ecc:	4282      	cmp	r2, r0
 8001ece:	d003      	beq.n	8001ed8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001ed0:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8001ed4:	4282      	cmp	r2, r0
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ed8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001edc:	6849      	ldr	r1, [r1, #4]
 8001ede:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ee0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ef2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001ef4:	2002      	movs	r0, #2
}
 8001ef6:	4770      	bx	lr
 8001ef8:	40010000 	.word	0x40010000

08001efc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001efc:	4770      	bx	lr

08001efe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001efe:	4770      	bx	lr

08001f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f00:	b510      	push	{r4, lr}
 8001f02:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f04:	6802      	ldr	r2, [r0, #0]
 8001f06:	6913      	ldr	r3, [r2, #16]
 8001f08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f0c:	68c1      	ldr	r1, [r0, #12]
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f12:	6883      	ldr	r3, [r0, #8]
 8001f14:	6902      	ldr	r2, [r0, #16]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	6943      	ldr	r3, [r0, #20]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	69c3      	ldr	r3, [r0, #28]
 8001f1e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001f20:	6801      	ldr	r1, [r0, #0]
 8001f22:	68cb      	ldr	r3, [r1, #12]
 8001f24:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001f28:	f023 030c 	bic.w	r3, r3, #12
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f30:	6802      	ldr	r2, [r0, #0]
 8001f32:	6953      	ldr	r3, [r2, #20]
 8001f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f38:	6981      	ldr	r1, [r0, #24]
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <UART_SetConfig+0x108>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d006      	beq.n	8001f54 <UART_SetConfig+0x54>
 8001f46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d002      	beq.n	8001f54 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f4e:	f7ff fd4f 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 8001f52:	e001      	b.n	8001f58 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f54:	f7ff fd5c 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f58:	69e3      	ldr	r3, [r4, #28]
 8001f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f5e:	d029      	beq.n	8001fb4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f60:	2100      	movs	r1, #0
 8001f62:	1803      	adds	r3, r0, r0
 8001f64:	4149      	adcs	r1, r1
 8001f66:	181b      	adds	r3, r3, r0
 8001f68:	f141 0100 	adc.w	r1, r1, #0
 8001f6c:	00c9      	lsls	r1, r1, #3
 8001f6e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1818      	adds	r0, r3, r0
 8001f76:	6863      	ldr	r3, [r4, #4]
 8001f78:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001f7c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001f80:	f141 0100 	adc.w	r1, r1, #0
 8001f84:	f7fe fdae 	bl	8000ae4 <__aeabi_uldivmod>
 8001f88:	4a20      	ldr	r2, [pc, #128]	@ (800200c <UART_SetConfig+0x10c>)
 8001f8a:	fba2 3100 	umull	r3, r1, r2, r0
 8001f8e:	0949      	lsrs	r1, r1, #5
 8001f90:	2364      	movs	r3, #100	@ 0x64
 8001f92:	fb03 0311 	mls	r3, r3, r1, r0
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	3332      	adds	r3, #50	@ 0x32
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001fa4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	6821      	ldr	r1, [r4, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }
}
 8001fb2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	1802      	adds	r2, r0, r0
 8001fb8:	eb43 0103 	adc.w	r1, r3, r3
 8001fbc:	1812      	adds	r2, r2, r0
 8001fbe:	f141 0100 	adc.w	r1, r1, #0
 8001fc2:	00c9      	lsls	r1, r1, #3
 8001fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fc8:	00d2      	lsls	r2, r2, #3
 8001fca:	1810      	adds	r0, r2, r0
 8001fcc:	f141 0100 	adc.w	r1, r1, #0
 8001fd0:	6862      	ldr	r2, [r4, #4]
 8001fd2:	1892      	adds	r2, r2, r2
 8001fd4:	415b      	adcs	r3, r3
 8001fd6:	f7fe fd85 	bl	8000ae4 <__aeabi_uldivmod>
 8001fda:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <UART_SetConfig+0x10c>)
 8001fdc:	fba2 3100 	umull	r3, r1, r2, r0
 8001fe0:	0949      	lsrs	r1, r1, #5
 8001fe2:	2364      	movs	r3, #100	@ 0x64
 8001fe4:	fb03 0311 	mls	r3, r3, r1, r0
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	3332      	adds	r3, #50	@ 0x32
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	005a      	lsls	r2, r3, #1
 8001ff4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001ff8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	6821      	ldr	r1, [r4, #0]
 8002002:	4413      	add	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
 8002006:	e7d4      	b.n	8001fb2 <UART_SetConfig+0xb2>
 8002008:	40011000 	.word	0x40011000
 800200c:	51eb851f 	.word	0x51eb851f

08002010 <HAL_UART_Init>:
  if (huart == NULL)
 8002010:	b360      	cbz	r0, 800206c <HAL_UART_Init+0x5c>
{
 8002012:	b510      	push	{r4, lr}
 8002014:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002016:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800201a:	b313      	cbz	r3, 8002062 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800201c:	2324      	movs	r3, #36	@ 0x24
 800201e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002022:	6822      	ldr	r2, [r4, #0]
 8002024:	68d3      	ldr	r3, [r2, #12]
 8002026:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800202a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff ff67 	bl	8001f00 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	6913      	ldr	r3, [r2, #16]
 8002036:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800203a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203c:	6822      	ldr	r2, [r4, #0]
 800203e:	6953      	ldr	r3, [r2, #20]
 8002040:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002044:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	68d3      	ldr	r3, [r2, #12]
 800204a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800204e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002050:	2000      	movs	r0, #0
 8002052:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002054:	2320      	movs	r3, #32
 8002056:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800205a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800205e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002060:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002062:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002066:	f7ff f943 	bl	80012f0 <HAL_UART_MspInit>
 800206a:	e7d7      	b.n	800201c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800206c:	2001      	movs	r0, #1
}
 800206e:	4770      	bx	lr

08002070 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002070:	e7fe      	b.n	8002070 <NMI_Handler>

08002072 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler>

08002074 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler>

08002076 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler>

08002078 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <UsageFault_Handler>

0800207a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207a:	4770      	bx	lr

0800207c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	4770      	bx	lr

08002080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002082:	f7fe ff75 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002086:	bd08      	pop	{r3, pc}

08002088 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800208a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800208e:	f7ff f8e7 	bl	8001260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002092:	bd08      	pop	{r3, pc}

08002094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002094:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002096:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <TIM2_IRQHandler+0xc>)
 8002098:	f7ff fd35 	bl	8001b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800209c:	bd08      	pop	{r3, pc}
 800209e:	bf00      	nop
 80020a0:	200000bc 	.word	0x200000bc

080020a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a4:	4a03      	ldr	r2, [pc, #12]	@ (80020b4 <SystemInit+0x10>)
 80020a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80020aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020bc:	f7ff fff2 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	@ (80020f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	@ (80020f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	@ (80020fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020e6:	f000 f819 	bl	800211c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ea:	f7fe feed 	bl	8000ec8 <main>
  bx  lr    
 80020ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020fc:	08002460 	.word	0x08002460
  ldr r2, =_sbss
 8002100:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002104:	20000134 	.word	0x20000134

08002108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC_IRQHandler>

0800210a <memset>:
 800210a:	4402      	add	r2, r0
 800210c:	4603      	mov	r3, r0
 800210e:	4293      	cmp	r3, r2
 8002110:	d100      	bne.n	8002114 <memset+0xa>
 8002112:	4770      	bx	lr
 8002114:	f803 1b01 	strb.w	r1, [r3], #1
 8002118:	e7f9      	b.n	800210e <memset+0x4>
	...

0800211c <__libc_init_array>:
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	4d0d      	ldr	r5, [pc, #52]	@ (8002154 <__libc_init_array+0x38>)
 8002120:	4c0d      	ldr	r4, [pc, #52]	@ (8002158 <__libc_init_array+0x3c>)
 8002122:	1b64      	subs	r4, r4, r5
 8002124:	10a4      	asrs	r4, r4, #2
 8002126:	2600      	movs	r6, #0
 8002128:	42a6      	cmp	r6, r4
 800212a:	d109      	bne.n	8002140 <__libc_init_array+0x24>
 800212c:	4d0b      	ldr	r5, [pc, #44]	@ (800215c <__libc_init_array+0x40>)
 800212e:	4c0c      	ldr	r4, [pc, #48]	@ (8002160 <__libc_init_array+0x44>)
 8002130:	f000 f976 	bl	8002420 <_init>
 8002134:	1b64      	subs	r4, r4, r5
 8002136:	10a4      	asrs	r4, r4, #2
 8002138:	2600      	movs	r6, #0
 800213a:	42a6      	cmp	r6, r4
 800213c:	d105      	bne.n	800214a <__libc_init_array+0x2e>
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	f855 3b04 	ldr.w	r3, [r5], #4
 8002144:	4798      	blx	r3
 8002146:	3601      	adds	r6, #1
 8002148:	e7ee      	b.n	8002128 <__libc_init_array+0xc>
 800214a:	f855 3b04 	ldr.w	r3, [r5], #4
 800214e:	4798      	blx	r3
 8002150:	3601      	adds	r6, #1
 8002152:	e7f2      	b.n	800213a <__libc_init_array+0x1e>
 8002154:	08002458 	.word	0x08002458
 8002158:	08002458 	.word	0x08002458
 800215c:	08002458 	.word	0x08002458
 8002160:	0800245c 	.word	0x0800245c

08002164 <__udivmoddi4>:
 8002164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002168:	9d08      	ldr	r5, [sp, #32]
 800216a:	460e      	mov	r6, r1
 800216c:	4604      	mov	r4, r0
 800216e:	460f      	mov	r7, r1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d14a      	bne.n	800220a <__udivmoddi4+0xa6>
 8002174:	4694      	mov	ip, r2
 8002176:	458c      	cmp	ip, r1
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	d960      	bls.n	8002240 <__udivmoddi4+0xdc>
 800217e:	b142      	cbz	r2, 8002192 <__udivmoddi4+0x2e>
 8002180:	f1c2 0320 	rsb	r3, r2, #32
 8002184:	4097      	lsls	r7, r2
 8002186:	fa20 f303 	lsr.w	r3, r0, r3
 800218a:	fa0c fc02 	lsl.w	ip, ip, r2
 800218e:	431f      	orrs	r7, r3
 8002190:	4094      	lsls	r4, r2
 8002192:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8002196:	fa1f f68c 	uxth.w	r6, ip
 800219a:	fbb7 f1fe 	udiv	r1, r7, lr
 800219e:	0c23      	lsrs	r3, r4, #16
 80021a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80021a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80021a8:	fb01 f006 	mul.w	r0, r1, r6
 80021ac:	4298      	cmp	r0, r3
 80021ae:	d90a      	bls.n	80021c6 <__udivmoddi4+0x62>
 80021b0:	eb1c 0303 	adds.w	r3, ip, r3
 80021b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80021b8:	f080 8115 	bcs.w	80023e6 <__udivmoddi4+0x282>
 80021bc:	4298      	cmp	r0, r3
 80021be:	f240 8112 	bls.w	80023e6 <__udivmoddi4+0x282>
 80021c2:	3902      	subs	r1, #2
 80021c4:	4463      	add	r3, ip
 80021c6:	1a1b      	subs	r3, r3, r0
 80021c8:	b2a4      	uxth	r4, r4
 80021ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80021ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80021d2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80021d6:	fb00 f606 	mul.w	r6, r0, r6
 80021da:	42a6      	cmp	r6, r4
 80021dc:	d90a      	bls.n	80021f4 <__udivmoddi4+0x90>
 80021de:	eb1c 0404 	adds.w	r4, ip, r4
 80021e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80021e6:	f080 8100 	bcs.w	80023ea <__udivmoddi4+0x286>
 80021ea:	42a6      	cmp	r6, r4
 80021ec:	f240 80fd 	bls.w	80023ea <__udivmoddi4+0x286>
 80021f0:	4464      	add	r4, ip
 80021f2:	3802      	subs	r0, #2
 80021f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80021f8:	1ba4      	subs	r4, r4, r6
 80021fa:	2100      	movs	r1, #0
 80021fc:	b11d      	cbz	r5, 8002206 <__udivmoddi4+0xa2>
 80021fe:	40d4      	lsrs	r4, r2
 8002200:	2300      	movs	r3, #0
 8002202:	e9c5 4300 	strd	r4, r3, [r5]
 8002206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220a:	428b      	cmp	r3, r1
 800220c:	d905      	bls.n	800221a <__udivmoddi4+0xb6>
 800220e:	b10d      	cbz	r5, 8002214 <__udivmoddi4+0xb0>
 8002210:	e9c5 0100 	strd	r0, r1, [r5]
 8002214:	2100      	movs	r1, #0
 8002216:	4608      	mov	r0, r1
 8002218:	e7f5      	b.n	8002206 <__udivmoddi4+0xa2>
 800221a:	fab3 f183 	clz	r1, r3
 800221e:	2900      	cmp	r1, #0
 8002220:	d146      	bne.n	80022b0 <__udivmoddi4+0x14c>
 8002222:	42b3      	cmp	r3, r6
 8002224:	d302      	bcc.n	800222c <__udivmoddi4+0xc8>
 8002226:	4282      	cmp	r2, r0
 8002228:	f200 80f5 	bhi.w	8002416 <__udivmoddi4+0x2b2>
 800222c:	1a84      	subs	r4, r0, r2
 800222e:	eb66 0203 	sbc.w	r2, r6, r3
 8002232:	2001      	movs	r0, #1
 8002234:	4617      	mov	r7, r2
 8002236:	2d00      	cmp	r5, #0
 8002238:	d0e5      	beq.n	8002206 <__udivmoddi4+0xa2>
 800223a:	e9c5 4700 	strd	r4, r7, [r5]
 800223e:	e7e2      	b.n	8002206 <__udivmoddi4+0xa2>
 8002240:	2a00      	cmp	r2, #0
 8002242:	f040 8093 	bne.w	800236c <__udivmoddi4+0x208>
 8002246:	eba1 030c 	sub.w	r3, r1, ip
 800224a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800224e:	fa1f fe8c 	uxth.w	lr, ip
 8002252:	2101      	movs	r1, #1
 8002254:	fbb3 f6f7 	udiv	r6, r3, r7
 8002258:	fb07 3016 	mls	r0, r7, r6, r3
 800225c:	0c23      	lsrs	r3, r4, #16
 800225e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002262:	fb0e f006 	mul.w	r0, lr, r6
 8002266:	4298      	cmp	r0, r3
 8002268:	d908      	bls.n	800227c <__udivmoddi4+0x118>
 800226a:	eb1c 0303 	adds.w	r3, ip, r3
 800226e:	f106 38ff 	add.w	r8, r6, #4294967295
 8002272:	d202      	bcs.n	800227a <__udivmoddi4+0x116>
 8002274:	4298      	cmp	r0, r3
 8002276:	f200 80d0 	bhi.w	800241a <__udivmoddi4+0x2b6>
 800227a:	4646      	mov	r6, r8
 800227c:	1a1b      	subs	r3, r3, r0
 800227e:	b2a4      	uxth	r4, r4
 8002280:	fbb3 f0f7 	udiv	r0, r3, r7
 8002284:	fb07 3310 	mls	r3, r7, r0, r3
 8002288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800228c:	fb0e fe00 	mul.w	lr, lr, r0
 8002290:	45a6      	cmp	lr, r4
 8002292:	d908      	bls.n	80022a6 <__udivmoddi4+0x142>
 8002294:	eb1c 0404 	adds.w	r4, ip, r4
 8002298:	f100 33ff 	add.w	r3, r0, #4294967295
 800229c:	d202      	bcs.n	80022a4 <__udivmoddi4+0x140>
 800229e:	45a6      	cmp	lr, r4
 80022a0:	f200 80b6 	bhi.w	8002410 <__udivmoddi4+0x2ac>
 80022a4:	4618      	mov	r0, r3
 80022a6:	eba4 040e 	sub.w	r4, r4, lr
 80022aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80022ae:	e7a5      	b.n	80021fc <__udivmoddi4+0x98>
 80022b0:	f1c1 0720 	rsb	r7, r1, #32
 80022b4:	408b      	lsls	r3, r1
 80022b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80022ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80022be:	fa06 fe01 	lsl.w	lr, r6, r1
 80022c2:	fa20 f407 	lsr.w	r4, r0, r7
 80022c6:	fa26 f307 	lsr.w	r3, r6, r7
 80022ca:	ea44 040e 	orr.w	r4, r4, lr
 80022ce:	fa00 f801 	lsl.w	r8, r0, r1
 80022d2:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80022d6:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80022da:	fbb3 fef0 	udiv	lr, r3, r0
 80022de:	fa1f f68c 	uxth.w	r6, ip
 80022e2:	fb00 331e 	mls	r3, r0, lr, r3
 80022e6:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80022ea:	fb0e f906 	mul.w	r9, lr, r6
 80022ee:	4599      	cmp	r9, r3
 80022f0:	fa02 f201 	lsl.w	r2, r2, r1
 80022f4:	d90b      	bls.n	800230e <__udivmoddi4+0x1aa>
 80022f6:	eb1c 0303 	adds.w	r3, ip, r3
 80022fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80022fe:	f080 8085 	bcs.w	800240c <__udivmoddi4+0x2a8>
 8002302:	4599      	cmp	r9, r3
 8002304:	f240 8082 	bls.w	800240c <__udivmoddi4+0x2a8>
 8002308:	f1ae 0e02 	sub.w	lr, lr, #2
 800230c:	4463      	add	r3, ip
 800230e:	eba3 0909 	sub.w	r9, r3, r9
 8002312:	b2a4      	uxth	r4, r4
 8002314:	fbb9 f3f0 	udiv	r3, r9, r0
 8002318:	fb00 9913 	mls	r9, r0, r3, r9
 800231c:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8002320:	fb03 f606 	mul.w	r6, r3, r6
 8002324:	42a6      	cmp	r6, r4
 8002326:	d908      	bls.n	800233a <__udivmoddi4+0x1d6>
 8002328:	eb1c 0404 	adds.w	r4, ip, r4
 800232c:	f103 30ff 	add.w	r0, r3, #4294967295
 8002330:	d268      	bcs.n	8002404 <__udivmoddi4+0x2a0>
 8002332:	42a6      	cmp	r6, r4
 8002334:	d966      	bls.n	8002404 <__udivmoddi4+0x2a0>
 8002336:	3b02      	subs	r3, #2
 8002338:	4464      	add	r4, ip
 800233a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800233e:	1ba4      	subs	r4, r4, r6
 8002340:	fba0 e602 	umull	lr, r6, r0, r2
 8002344:	42b4      	cmp	r4, r6
 8002346:	4673      	mov	r3, lr
 8002348:	46b1      	mov	r9, r6
 800234a:	d352      	bcc.n	80023f2 <__udivmoddi4+0x28e>
 800234c:	d04f      	beq.n	80023ee <__udivmoddi4+0x28a>
 800234e:	b15d      	cbz	r5, 8002368 <__udivmoddi4+0x204>
 8002350:	ebb8 0203 	subs.w	r2, r8, r3
 8002354:	eb64 0409 	sbc.w	r4, r4, r9
 8002358:	fa04 f707 	lsl.w	r7, r4, r7
 800235c:	fa22 f301 	lsr.w	r3, r2, r1
 8002360:	431f      	orrs	r7, r3
 8002362:	40cc      	lsrs	r4, r1
 8002364:	e9c5 7400 	strd	r7, r4, [r5]
 8002368:	2100      	movs	r1, #0
 800236a:	e74c      	b.n	8002206 <__udivmoddi4+0xa2>
 800236c:	f1c2 0120 	rsb	r1, r2, #32
 8002370:	fa20 f301 	lsr.w	r3, r0, r1
 8002374:	fa0c fc02 	lsl.w	ip, ip, r2
 8002378:	fa26 f101 	lsr.w	r1, r6, r1
 800237c:	4096      	lsls	r6, r2
 800237e:	4333      	orrs	r3, r6
 8002380:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002384:	fa1f fe8c 	uxth.w	lr, ip
 8002388:	fbb1 f0f7 	udiv	r0, r1, r7
 800238c:	fb07 1610 	mls	r6, r7, r0, r1
 8002390:	0c19      	lsrs	r1, r3, #16
 8002392:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8002396:	fb00 f60e 	mul.w	r6, r0, lr
 800239a:	428e      	cmp	r6, r1
 800239c:	fa04 f402 	lsl.w	r4, r4, r2
 80023a0:	d908      	bls.n	80023b4 <__udivmoddi4+0x250>
 80023a2:	eb1c 0101 	adds.w	r1, ip, r1
 80023a6:	f100 38ff 	add.w	r8, r0, #4294967295
 80023aa:	d22d      	bcs.n	8002408 <__udivmoddi4+0x2a4>
 80023ac:	428e      	cmp	r6, r1
 80023ae:	d92b      	bls.n	8002408 <__udivmoddi4+0x2a4>
 80023b0:	3802      	subs	r0, #2
 80023b2:	4461      	add	r1, ip
 80023b4:	1b89      	subs	r1, r1, r6
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80023bc:	fb07 1116 	mls	r1, r7, r6, r1
 80023c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80023c4:	fb06 f10e 	mul.w	r1, r6, lr
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d908      	bls.n	80023de <__udivmoddi4+0x27a>
 80023cc:	eb1c 0303 	adds.w	r3, ip, r3
 80023d0:	f106 38ff 	add.w	r8, r6, #4294967295
 80023d4:	d214      	bcs.n	8002400 <__udivmoddi4+0x29c>
 80023d6:	4299      	cmp	r1, r3
 80023d8:	d912      	bls.n	8002400 <__udivmoddi4+0x29c>
 80023da:	3e02      	subs	r6, #2
 80023dc:	4463      	add	r3, ip
 80023de:	1a5b      	subs	r3, r3, r1
 80023e0:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 80023e4:	e736      	b.n	8002254 <__udivmoddi4+0xf0>
 80023e6:	4639      	mov	r1, r7
 80023e8:	e6ed      	b.n	80021c6 <__udivmoddi4+0x62>
 80023ea:	4618      	mov	r0, r3
 80023ec:	e702      	b.n	80021f4 <__udivmoddi4+0x90>
 80023ee:	45f0      	cmp	r8, lr
 80023f0:	d2ad      	bcs.n	800234e <__udivmoddi4+0x1ea>
 80023f2:	ebbe 0302 	subs.w	r3, lr, r2
 80023f6:	eb66 060c 	sbc.w	r6, r6, ip
 80023fa:	3801      	subs	r0, #1
 80023fc:	46b1      	mov	r9, r6
 80023fe:	e7a6      	b.n	800234e <__udivmoddi4+0x1ea>
 8002400:	4646      	mov	r6, r8
 8002402:	e7ec      	b.n	80023de <__udivmoddi4+0x27a>
 8002404:	4603      	mov	r3, r0
 8002406:	e798      	b.n	800233a <__udivmoddi4+0x1d6>
 8002408:	4640      	mov	r0, r8
 800240a:	e7d3      	b.n	80023b4 <__udivmoddi4+0x250>
 800240c:	46d6      	mov	lr, sl
 800240e:	e77e      	b.n	800230e <__udivmoddi4+0x1aa>
 8002410:	4464      	add	r4, ip
 8002412:	3802      	subs	r0, #2
 8002414:	e747      	b.n	80022a6 <__udivmoddi4+0x142>
 8002416:	4608      	mov	r0, r1
 8002418:	e70d      	b.n	8002236 <__udivmoddi4+0xd2>
 800241a:	3e02      	subs	r6, #2
 800241c:	4463      	add	r3, ip
 800241e:	e72d      	b.n	800227c <__udivmoddi4+0x118>

08002420 <_init>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	bf00      	nop
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr

0800242c <_fini>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	bf00      	nop
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr
