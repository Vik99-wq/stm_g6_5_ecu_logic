ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB139:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** int COUNTER = 0;
  35:Core/Src/main.c **** int curr_tim2Counter = 0;
  36:Core/Src/main.c **** int prev_tim2Counter = 0;
  37:Core/Src/main.c **** int prev_prev_tim2Counter = 0;
  38:Core/Src/main.c **** float RPM = 0;  
  39:Core/Src/main.c **** const float MusTOhz = 1000000.0;
  40:Core/Src/main.c **** const int HzToRPM = 60;
  41:Core/Src/main.c **** float frequency = 0;
  42:Core/Src/main.c **** double time_diff;
  43:Core/Src/main.c **** double time_diff_us;
  44:Core/Src/main.c **** int capturedValue = 0;
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** UART_HandleTypeDef huart1;
  56:Core/Src/main.c **** UART_HandleTypeDef huart2;
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE BEGIN PV */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE END PV */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  63:Core/Src/main.c **** void SystemClock_Config(void);
  64:Core/Src/main.c **** static void MX_GPIO_Init(void);
  65:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  66:Core/Src/main.c **** static void MX_TIM2_Init(void);
  67:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  68:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END PFP */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  73:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END 0 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /**
  78:Core/Src/main.c ****   * @brief  The application entry point.
  79:Core/Src/main.c ****   * @retval int
  80:Core/Src/main.c ****   */
  81:Core/Src/main.c **** int main(void)
  82:Core/Src/main.c **** {
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  91:Core/Src/main.c ****   HAL_Init();
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END Init */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Configure the system clock */
  98:Core/Src/main.c ****   SystemClock_Config();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END SysInit */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Initialize all configured peripherals */
 105:Core/Src/main.c ****   MX_GPIO_Init();
 106:Core/Src/main.c ****   MX_USART2_UART_Init();
 107:Core/Src/main.c ****   MX_TIM2_Init();
 108:Core/Src/main.c ****   MX_USART1_UART_Init();
 109:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 110:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 111:Core/Src/main.c ****   /* USER CODE END 2 */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* Infinite loop */
 114:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 115:Core/Src/main.c ****   while (1)
 116:Core/Src/main.c ****   {
 117:Core/Src/main.c ****     /* USER CODE END WHILE */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 120:Core/Src/main.c ****   }
 121:Core/Src/main.c ****   /* USER CODE END 3 */
 122:Core/Src/main.c **** }
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /**
 125:Core/Src/main.c ****   * @brief System Clock Configuration
 126:Core/Src/main.c ****   * @retval None
 127:Core/Src/main.c ****   */
 128:Core/Src/main.c **** void SystemClock_Config(void)
 129:Core/Src/main.c **** {
 130:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 131:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 134:Core/Src/main.c ****   */
 135:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 136:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 139:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 140:Core/Src/main.c ****   */
 141:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 143:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 4


 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 80;
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 150:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 151:Core/Src/main.c ****   {
 152:Core/Src/main.c ****     Error_Handler();
 153:Core/Src/main.c ****   }
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 156:Core/Src/main.c ****   */
 157:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 158:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 159:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 160:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 162:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 165:Core/Src/main.c ****   {
 166:Core/Src/main.c ****     Error_Handler();
 167:Core/Src/main.c ****   }
 168:Core/Src/main.c **** }
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /**
 171:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 172:Core/Src/main.c ****   * @param None
 173:Core/Src/main.c ****   * @retval None
 174:Core/Src/main.c ****   */
 175:Core/Src/main.c **** static void MX_TIM2_Init(void)
 176:Core/Src/main.c **** {
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 183:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 188:Core/Src/main.c ****   htim2.Instance = TIM2;
 189:Core/Src/main.c ****   htim2.Init.Prescaler = 7;
 190:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 191:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 192:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 193:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 194:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 195:Core/Src/main.c ****   {
 196:Core/Src/main.c ****     Error_Handler();
 197:Core/Src/main.c ****   }
 198:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 199:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 200:Core/Src/main.c ****   {
 201:Core/Src/main.c ****     Error_Handler();
 202:Core/Src/main.c ****   }
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 5


 203:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 204:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 205:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 206:Core/Src/main.c ****   {
 207:Core/Src/main.c ****     Error_Handler();
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** }
 214:Core/Src/main.c **** 
 215:Core/Src/main.c **** /**
 216:Core/Src/main.c ****   * @brief USART1 Initialization Function
 217:Core/Src/main.c ****   * @param None
 218:Core/Src/main.c ****   * @retval None
 219:Core/Src/main.c ****   */
 220:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 221:Core/Src/main.c **** {
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 230:Core/Src/main.c ****   huart1.Instance = USART1;
 231:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 232:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 233:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 234:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 235:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 236:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 237:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 238:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 239:Core/Src/main.c ****   {
 240:Core/Src/main.c ****     Error_Handler();
 241:Core/Src/main.c ****   }
 242:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c **** }
 247:Core/Src/main.c **** 
 248:Core/Src/main.c **** /**
 249:Core/Src/main.c ****   * @brief USART2 Initialization Function
 250:Core/Src/main.c ****   * @param None
 251:Core/Src/main.c ****   * @retval None
 252:Core/Src/main.c ****   */
 253:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 254:Core/Src/main.c **** {
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 259:Core/Src/main.c **** 
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 6


 260:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 263:Core/Src/main.c ****   huart2.Instance = USART2;
 264:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 265:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 266:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 267:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 268:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 269:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 270:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 271:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     Error_Handler();
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** }
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** /**
 282:Core/Src/main.c ****   * @brief GPIO Initialization Function
 283:Core/Src/main.c ****   * @param None
 284:Core/Src/main.c ****   * @retval None
 285:Core/Src/main.c ****   */
 286:Core/Src/main.c **** static void MX_GPIO_Init(void)
 287:Core/Src/main.c **** {
  28              		.loc 1 287 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 8BB0     		sub	sp, sp, #44
  38              		.cfi_def_cfa_offset 56
 288:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 288 3 view .LVU1
  40              		.loc 1 288 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0594     		str	r4, [sp, #20]
  43 0008 0694     		str	r4, [sp, #24]
  44 000a 0794     		str	r4, [sp, #28]
  45 000c 0894     		str	r4, [sp, #32]
  46 000e 0994     		str	r4, [sp, #36]
 289:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 290:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 291:Core/Src/main.c **** 
 292:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 293:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 293 3 is_stmt 1 view .LVU3
  48              	.LBB4:
  49              		.loc 1 293 3 view .LVU4
  50 0010 0194     		str	r4, [sp, #4]
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 7


  51              		.loc 1 293 3 view .LVU5
  52 0012 2C4B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F00402 		orr	r2, r2, #4
  55 001a 1A63     		str	r2, [r3, #48]
  56              		.loc 1 293 3 view .LVU6
  57 001c 1A6B     		ldr	r2, [r3, #48]
  58 001e 02F00402 		and	r2, r2, #4
  59 0022 0192     		str	r2, [sp, #4]
  60              		.loc 1 293 3 view .LVU7
  61 0024 019A     		ldr	r2, [sp, #4]
  62              	.LBE4:
  63              		.loc 1 293 3 view .LVU8
 294:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  64              		.loc 1 294 3 view .LVU9
  65              	.LBB5:
  66              		.loc 1 294 3 view .LVU10
  67 0026 0294     		str	r4, [sp, #8]
  68              		.loc 1 294 3 view .LVU11
  69 0028 1A6B     		ldr	r2, [r3, #48]
  70 002a 42F08002 		orr	r2, r2, #128
  71 002e 1A63     		str	r2, [r3, #48]
  72              		.loc 1 294 3 view .LVU12
  73 0030 1A6B     		ldr	r2, [r3, #48]
  74 0032 02F08002 		and	r2, r2, #128
  75 0036 0292     		str	r2, [sp, #8]
  76              		.loc 1 294 3 view .LVU13
  77 0038 029A     		ldr	r2, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 294 3 view .LVU14
 295:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  80              		.loc 1 295 3 view .LVU15
  81              	.LBB6:
  82              		.loc 1 295 3 view .LVU16
  83 003a 0394     		str	r4, [sp, #12]
  84              		.loc 1 295 3 view .LVU17
  85 003c 1A6B     		ldr	r2, [r3, #48]
  86 003e 42F00102 		orr	r2, r2, #1
  87 0042 1A63     		str	r2, [r3, #48]
  88              		.loc 1 295 3 view .LVU18
  89 0044 1A6B     		ldr	r2, [r3, #48]
  90 0046 02F00102 		and	r2, r2, #1
  91 004a 0392     		str	r2, [sp, #12]
  92              		.loc 1 295 3 view .LVU19
  93 004c 039A     		ldr	r2, [sp, #12]
  94              	.LBE6:
  95              		.loc 1 295 3 view .LVU20
 296:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  96              		.loc 1 296 3 view .LVU21
  97              	.LBB7:
  98              		.loc 1 296 3 view .LVU22
  99 004e 0494     		str	r4, [sp, #16]
 100              		.loc 1 296 3 view .LVU23
 101 0050 1A6B     		ldr	r2, [r3, #48]
 102 0052 42F00202 		orr	r2, r2, #2
 103 0056 1A63     		str	r2, [r3, #48]
 104              		.loc 1 296 3 view .LVU24
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 8


 105 0058 1B6B     		ldr	r3, [r3, #48]
 106 005a 03F00203 		and	r3, r3, #2
 107 005e 0493     		str	r3, [sp, #16]
 108              		.loc 1 296 3 view .LVU25
 109 0060 049B     		ldr	r3, [sp, #16]
 110              	.LBE7:
 111              		.loc 1 296 3 view .LVU26
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 299:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 112              		.loc 1 299 3 view .LVU27
 113 0062 194D     		ldr	r5, .L3+4
 114 0064 2246     		mov	r2, r4
 115 0066 2021     		movs	r1, #32
 116 0068 2846     		mov	r0, r5
 117 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL0:
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 302:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 119              		.loc 1 302 3 view .LVU28
 120              		.loc 1 302 23 is_stmt 0 view .LVU29
 121 006e 4FF40053 		mov	r3, #8192
 122 0072 0593     		str	r3, [sp, #20]
 303:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 123              		.loc 1 303 3 is_stmt 1 view .LVU30
 124              		.loc 1 303 24 is_stmt 0 view .LVU31
 125 0074 4FF40413 		mov	r3, #2162688
 126 0078 0693     		str	r3, [sp, #24]
 304:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 127              		.loc 1 304 3 is_stmt 1 view .LVU32
 128              		.loc 1 304 24 is_stmt 0 view .LVU33
 129 007a 0794     		str	r4, [sp, #28]
 305:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 130              		.loc 1 305 3 is_stmt 1 view .LVU34
 131 007c 05A9     		add	r1, sp, #20
 132 007e 1348     		ldr	r0, .L3+8
 133 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 134              	.LVL1:
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 308:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 135              		.loc 1 308 3 view .LVU35
 136              		.loc 1 308 23 is_stmt 0 view .LVU36
 137 0084 2023     		movs	r3, #32
 138 0086 0593     		str	r3, [sp, #20]
 309:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 139              		.loc 1 309 3 is_stmt 1 view .LVU37
 140              		.loc 1 309 24 is_stmt 0 view .LVU38
 141 0088 0123     		movs	r3, #1
 142 008a 0693     		str	r3, [sp, #24]
 310:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 143              		.loc 1 310 3 is_stmt 1 view .LVU39
 144              		.loc 1 310 24 is_stmt 0 view .LVU40
 145 008c 0794     		str	r4, [sp, #28]
 311:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 146              		.loc 1 311 3 is_stmt 1 view .LVU41
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 9


 147              		.loc 1 311 25 is_stmt 0 view .LVU42
 148 008e 0894     		str	r4, [sp, #32]
 312:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 149              		.loc 1 312 3 is_stmt 1 view .LVU43
 150 0090 05A9     		add	r1, sp, #20
 151 0092 2846     		mov	r0, r5
 152 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 153              	.LVL2:
 313:Core/Src/main.c **** 
 314:Core/Src/main.c ****   /*Configure GPIO pin : PA8 */
 315:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 154              		.loc 1 315 3 view .LVU44
 155              		.loc 1 315 23 is_stmt 0 view .LVU45
 156 0098 4FF48073 		mov	r3, #256
 157 009c 0593     		str	r3, [sp, #20]
 316:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 158              		.loc 1 316 3 is_stmt 1 view .LVU46
 159              		.loc 1 316 24 is_stmt 0 view .LVU47
 160 009e 4FF48813 		mov	r3, #1114112
 161 00a2 0693     		str	r3, [sp, #24]
 317:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 162              		.loc 1 317 3 is_stmt 1 view .LVU48
 163              		.loc 1 317 24 is_stmt 0 view .LVU49
 164 00a4 0794     		str	r4, [sp, #28]
 318:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 165              		.loc 1 318 3 is_stmt 1 view .LVU50
 166 00a6 05A9     		add	r1, sp, #20
 167 00a8 2846     		mov	r0, r5
 168 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL3:
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* EXTI interrupt init*/
 321:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 170              		.loc 1 321 3 view .LVU51
 171 00ae 2246     		mov	r2, r4
 172 00b0 2146     		mov	r1, r4
 173 00b2 1720     		movs	r0, #23
 174 00b4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 175              	.LVL4:
 322:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 176              		.loc 1 322 3 view .LVU52
 177 00b8 1720     		movs	r0, #23
 178 00ba FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 179              	.LVL5:
 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 325:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 326:Core/Src/main.c **** }
 180              		.loc 1 326 1 is_stmt 0 view .LVU53
 181 00be 0BB0     		add	sp, sp, #44
 182              		.cfi_def_cfa_offset 12
 183              		@ sp needed
 184 00c0 30BD     		pop	{r4, r5, pc}
 185              	.L4:
 186 00c2 00BF     		.align	2
 187              	.L3:
 188 00c4 00380240 		.word	1073887232
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 10


 189 00c8 00000240 		.word	1073872896
 190 00cc 00080240 		.word	1073874944
 191              		.cfi_endproc
 192              	.LFE139:
 194              		.global	__aeabi_i2d
 195              		.global	__aeabi_ddiv
 196              		.global	__aeabi_d2f
 197              		.global	__aeabi_l2d
 198              		.global	__aeabi_dcmpgt
 199              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 200              		.align	1
 201              		.global	HAL_GPIO_EXTI_Callback
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 206              	HAL_GPIO_EXTI_Callback:
 207              	.LVL6:
 208              	.LFB140:
 327:Core/Src/main.c **** 
 328:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 209              		.loc 1 330 48 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 331:Core/Src/main.c ****     // Check if EXTI8 triggered the interrupt
 332:Core/Src/main.c ****     if (GPIO_Pin == GPIO_PIN_8) 
 213              		.loc 1 332 5 view .LVU55
 214              		.loc 1 332 8 is_stmt 0 view .LVU56
 215 0000 B0F5807F 		cmp	r0, #256
 216 0004 00D0     		beq	.L19
 217 0006 7047     		bx	lr
 218              	.L19:
 330:Core/Src/main.c ****     // Check if EXTI8 triggered the interrupt
 219              		.loc 1 330 48 view .LVU57
 220 0008 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 221              		.cfi_def_cfa_offset 24
 222              		.cfi_offset 3, -24
 223              		.cfi_offset 4, -20
 224              		.cfi_offset 5, -16
 225              		.cfi_offset 6, -12
 226              		.cfi_offset 7, -8
 227              		.cfi_offset 14, -4
 333:Core/Src/main.c ****     {
 334:Core/Src/main.c ****       // Retrieve the current timer count
 335:Core/Src/main.c ****       curr_tim2Counter = __HAL_TIM_GET_COUNTER(&htim2);
 228              		.loc 1 335 7 is_stmt 1 view .LVU58
 229              		.loc 1 335 26 is_stmt 0 view .LVU59
 230 000a 3B4B     		ldr	r3, .L20+8
 231 000c 1B68     		ldr	r3, [r3]
 232 000e 5C6A     		ldr	r4, [r3, #36]
 233              		.loc 1 335 24 view .LVU60
 234 0010 3A4B     		ldr	r3, .L20+12
 235 0012 1C60     		str	r4, [r3]
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****       // Check if we have at least two previous cycles
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 11


 338:Core/Src/main.c ****       if (COUNTER > 1)
 236              		.loc 1 338 7 is_stmt 1 view .LVU61
 237              		.loc 1 338 19 is_stmt 0 view .LVU62
 238 0014 3A4B     		ldr	r3, .L20+16
 239 0016 1D68     		ldr	r5, [r3]
 240              		.loc 1 338 10 view .LVU63
 241 0018 012D     		cmp	r5, #1
 242 001a 5BDD     		ble	.L7
 339:Core/Src/main.c ****       {
 340:Core/Src/main.c ****           if (curr_tim2Counter >= prev_prev_tim2Counter)
 243              		.loc 1 340 11 is_stmt 1 view .LVU64
 244              		.loc 1 340 32 is_stmt 0 view .LVU65
 245 001c 394B     		ldr	r3, .L20+20
 246 001e 1868     		ldr	r0, [r3]
 247              	.LVL7:
 248              		.loc 1 340 14 view .LVU66
 249 0020 8442     		cmp	r4, r0
 250 0022 30DB     		blt	.L8
 341:Core/Src/main.c ****           {
 342:Core/Src/main.c ****               time_diff = curr_tim2Counter - prev_prev_tim2Counter;
 251              		.loc 1 342 15 is_stmt 1 view .LVU67
 252              		.loc 1 342 25 is_stmt 0 view .LVU68
 253 0024 201A     		subs	r0, r4, r0
 254 0026 FFF7FEFF 		bl	__aeabi_i2d
 255              	.LVL8:
 256 002a 0646     		mov	r6, r0
 257 002c 0F46     		mov	r7, r1
 258 002e 364B     		ldr	r3, .L20+24
 259 0030 C3E90067 		strd	r6, [r3]
 343:Core/Src/main.c ****               time_diff_us = time_diff / 10.0;
 260              		.loc 1 343 15 is_stmt 1 view .LVU69
 261              		.loc 1 343 40 is_stmt 0 view .LVU70
 262 0034 0022     		movs	r2, #0
 263 0036 354B     		ldr	r3, .L20+28
 264 0038 FFF7FEFF 		bl	__aeabi_ddiv
 265              	.LVL9:
 266 003c 0246     		mov	r2, r0
 267 003e 0B46     		mov	r3, r1
 268              		.loc 1 343 28 view .LVU71
 269 0040 3349     		ldr	r1, .L20+32
 270 0042 C1E90023 		strd	r2, [r1]
 344:Core/Src/main.c ****               frequency = MusTOhz / time_diff_us;  // Convert time_diff to Hz
 271              		.loc 1 344 15 is_stmt 1 view .LVU72
 272              		.loc 1 344 35 is_stmt 0 view .LVU73
 273 0046 2AA1     		adr	r1, .L20
 274 0048 D1E90001 		ldrd	r0, [r1]
 275 004c FFF7FEFF 		bl	__aeabi_ddiv
 276              	.LVL10:
 277 0050 FFF7FEFF 		bl	__aeabi_d2f
 278              	.LVL11:
 279              		.loc 1 344 25 view .LVU74
 280 0054 2F4B     		ldr	r3, .L20+36
 281 0056 1860     		str	r0, [r3]	@ float
 282              	.L9:
 345:Core/Src/main.c ****           }
 346:Core/Src/main.c ****           else
 347:Core/Src/main.c ****           {
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 12


 348:Core/Src/main.c ****           // Handle timer overflow
 349:Core/Src/main.c ****               time_diff = (4294967295 - prev_prev_tim2Counter) + curr_tim2Counter + 1;
 350:Core/Src/main.c ****               time_diff_us = time_diff / 10.0;
 351:Core/Src/main.c ****               frequency = MusTOhz / time_diff_us;  // Convert time_diff to Hz
 352:Core/Src/main.c ****           }       
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****           if (time_diff > 0) 
 283              		.loc 1 354 11 is_stmt 1 view .LVU75
 284              		.loc 1 354 14 is_stmt 0 view .LVU76
 285 0058 0022     		movs	r2, #0
 286 005a 0023     		movs	r3, #0
 287 005c 2A49     		ldr	r1, .L20+24
 288 005e D1E90001 		ldrd	r0, [r1]
 289 0062 FFF7FEFF 		bl	__aeabi_dcmpgt
 290              	.LVL12:
 291 0066 88B3     		cbz	r0, .L14
 355:Core/Src/main.c ****           {
 356:Core/Src/main.c ****             RPM = frequency * HzToRPM;                   // Convert Hz to RPM
 292              		.loc 1 356 13 is_stmt 1 view .LVU77
 293              		.loc 1 356 29 is_stmt 0 view .LVU78
 294 0068 2A4B     		ldr	r3, .L20+36
 295 006a D3ED007A 		vldr.32	s15, [r3]
 296 006e 9FED2A7A 		vldr.32	s14, .L20+40
 297 0072 67EE877A 		vmul.f32	s15, s15, s14
 298              		.loc 1 356 17 view .LVU79
 299 0076 294B     		ldr	r3, .L20+44
 300 0078 C3ED007A 		vstr.32	s15, [r3]
 357:Core/Src/main.c ****             RPM *= 2;   // Manually correcting for the fact that it's trigering on the rising and f
 301              		.loc 1 357 13 is_stmt 1 view .LVU80
 302              		.loc 1 357 17 is_stmt 0 view .LVU81
 303 007c 77EEA77A 		vadd.f32	s15, s15, s15
 304 0080 C3ED007A 		vstr.32	s15, [r3]
 305 0084 29E0     		b	.L12
 306              	.L8:
 349:Core/Src/main.c ****               time_diff_us = time_diff / 10.0;
 307              		.loc 1 349 15 is_stmt 1 view .LVU82
 349:Core/Src/main.c ****               time_diff_us = time_diff / 10.0;
 308              		.loc 1 349 39 is_stmt 0 view .LVU83
 309 0086 D0F1FF33 		rsbs	r3, r0, #-1
 349:Core/Src/main.c ****               time_diff_us = time_diff / 10.0;
 310              		.loc 1 349 64 view .LVU84
 311 008a E117     		asrs	r1, r4, #31
 312 008c E318     		adds	r3, r4, r3
 313 008e 41EBD071 		adc	r1, r1, r0, lsr #31
 349:Core/Src/main.c ****               time_diff_us = time_diff / 10.0;
 314              		.loc 1 349 83 view .LVU85
 315 0092 581C     		adds	r0, r3, #1
 349:Core/Src/main.c ****               time_diff_us = time_diff / 10.0;
 316              		.loc 1 349 25 view .LVU86
 317 0094 41F10001 		adc	r1, r1, #0
 318 0098 FFF7FEFF 		bl	__aeabi_l2d
 319              	.LVL13:
 320 009c 0646     		mov	r6, r0
 321 009e 0F46     		mov	r7, r1
 322 00a0 194B     		ldr	r3, .L20+24
 323 00a2 C3E90067 		strd	r6, [r3]
 350:Core/Src/main.c ****               frequency = MusTOhz / time_diff_us;  // Convert time_diff to Hz
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 13


 324              		.loc 1 350 15 is_stmt 1 view .LVU87
 350:Core/Src/main.c ****               frequency = MusTOhz / time_diff_us;  // Convert time_diff to Hz
 325              		.loc 1 350 40 is_stmt 0 view .LVU88
 326 00a6 0022     		movs	r2, #0
 327 00a8 184B     		ldr	r3, .L20+28
 328 00aa FFF7FEFF 		bl	__aeabi_ddiv
 329              	.LVL14:
 330 00ae 0246     		mov	r2, r0
 331 00b0 0B46     		mov	r3, r1
 350:Core/Src/main.c ****               frequency = MusTOhz / time_diff_us;  // Convert time_diff to Hz
 332              		.loc 1 350 28 view .LVU89
 333 00b2 1749     		ldr	r1, .L20+32
 334 00b4 C1E90023 		strd	r2, [r1]
 351:Core/Src/main.c ****           }       
 335              		.loc 1 351 15 is_stmt 1 view .LVU90
 351:Core/Src/main.c ****           }       
 336              		.loc 1 351 35 is_stmt 0 view .LVU91
 337 00b8 0DA1     		adr	r1, .L20
 338 00ba D1E90001 		ldrd	r0, [r1]
 339 00be FFF7FEFF 		bl	__aeabi_ddiv
 340              	.LVL15:
 341 00c2 FFF7FEFF 		bl	__aeabi_d2f
 342              	.LVL16:
 351:Core/Src/main.c ****           }       
 343              		.loc 1 351 25 view .LVU92
 344 00c6 134B     		ldr	r3, .L20+36
 345 00c8 1860     		str	r0, [r3]	@ float
 346 00ca C5E7     		b	.L9
 347              	.L14:
 358:Core/Src/main.c ****           } 
 359:Core/Src/main.c ****           else 
 360:Core/Src/main.c ****           {
 361:Core/Src/main.c ****             RPM = -1;  // Error case
 348              		.loc 1 361 13 is_stmt 1 view .LVU93
 349              		.loc 1 361 17 is_stmt 0 view .LVU94
 350 00cc 134B     		ldr	r3, .L20+44
 351 00ce 144A     		ldr	r2, .L20+48
 352 00d0 1A60     		str	r2, [r3]	@ float
 353 00d2 02E0     		b	.L12
 354              	.LVL17:
 355              	.L7:
 362:Core/Src/main.c ****           }
 363:Core/Src/main.c ****       } 
 364:Core/Src/main.c ****       else
 365:Core/Src/main.c ****       {
 366:Core/Src/main.c ****           RPM = -1;  // Not enough cycles to calculate RPM
 356              		.loc 1 366 11 is_stmt 1 view .LVU95
 357              		.loc 1 366 15 is_stmt 0 view .LVU96
 358 00d4 114B     		ldr	r3, .L20+44
 359 00d6 124A     		ldr	r2, .L20+48
 360 00d8 1A60     		str	r2, [r3]	@ float
 361              	.LVL18:
 362              	.L12:
 367:Core/Src/main.c ****       }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****       // Update previous timer values for the next cycle
 370:Core/Src/main.c ****       prev_prev_tim2Counter = prev_tim2Counter;
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 14


 363              		.loc 1 370 7 is_stmt 1 view .LVU97
 364              		.loc 1 370 29 is_stmt 0 view .LVU98
 365 00da 124B     		ldr	r3, .L20+52
 366 00dc 1968     		ldr	r1, [r3]
 367 00de 094A     		ldr	r2, .L20+20
 368 00e0 1160     		str	r1, [r2]
 371:Core/Src/main.c ****       prev_tim2Counter = curr_tim2Counter;
 369              		.loc 1 371 7 is_stmt 1 view .LVU99
 370              		.loc 1 371 24 is_stmt 0 view .LVU100
 371 00e2 1C60     		str	r4, [r3]
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****       COUNTER++;
 372              		.loc 1 373 7 is_stmt 1 view .LVU101
 373              		.loc 1 373 14 is_stmt 0 view .LVU102
 374 00e4 0135     		adds	r5, r5, #1
 375 00e6 064B     		ldr	r3, .L20+16
 376 00e8 1D60     		str	r5, [r3]
 374:Core/Src/main.c ****     }
 375:Core/Src/main.c **** }
 377              		.loc 1 375 1 view .LVU103
 378 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 379              	.L21:
 380 00ec AFF30080 		.align	3
 381              	.L20:
 382 00f0 00000000 		.word	0
 383 00f4 80842E41 		.word	1093567616
 384 00f8 00000000 		.word	htim2
 385 00fc 00000000 		.word	curr_tim2Counter
 386 0100 00000000 		.word	COUNTER
 387 0104 00000000 		.word	prev_prev_tim2Counter
 388 0108 00000000 		.word	time_diff
 389 010c 00002440 		.word	1076101120
 390 0110 00000000 		.word	time_diff_us
 391 0114 00000000 		.word	frequency
 392 0118 00007042 		.word	1114636288
 393 011c 00000000 		.word	RPM
 394 0120 000080BF 		.word	-1082130432
 395 0124 00000000 		.word	prev_tim2Counter
 396              		.cfi_endproc
 397              	.LFE140:
 399              		.section	.text.Error_Handler,"ax",%progbits
 400              		.align	1
 401              		.global	Error_Handler
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 406              	Error_Handler:
 407              	.LFB141:
 376:Core/Src/main.c **** /* USER CODE END 4 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c **** /**
 379:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 380:Core/Src/main.c ****   * @retval None
 381:Core/Src/main.c ****   */
 382:Core/Src/main.c **** void Error_Handler(void)
 383:Core/Src/main.c **** {
 408              		.loc 1 383 1 is_stmt 1 view -0
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 15


 409              		.cfi_startproc
 410              		@ Volatile: function does not return.
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 384:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 385:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 386:Core/Src/main.c ****   __disable_irq();
 414              		.loc 1 386 3 view .LVU105
 415              	.LBB8:
 416              	.LBI8:
 417              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 16


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 17


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 18


 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 19


 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 20


 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 21


 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 22


 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 23


 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 24


 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 25


 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 26


 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 27


 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 28


 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 29


 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 30


 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 31


 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 32


 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 418              		.loc 2 960 27 view .LVU106
 419              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 420              		.loc 2 962 3 view .LVU107
 421              		.syntax unified
 422              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 423 0000 72B6     		cpsid i
 424              	@ 0 "" 2
 425              		.thumb
 426              		.syntax unified
 427              	.L23:
 428              	.LBE9:
 429              	.LBE8:
 387:Core/Src/main.c ****   while (1)
 430              		.loc 1 387 3 view .LVU108
 388:Core/Src/main.c ****   {
 389:Core/Src/main.c ****   }
 431              		.loc 1 389 3 view .LVU109
 387:Core/Src/main.c ****   while (1)
 432              		.loc 1 387 9 view .LVU110
 433 0002 FEE7     		b	.L23
 434              		.cfi_endproc
 435              	.LFE141:
 437              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 438              		.align	1
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 443              	MX_USART2_UART_Init:
 444              	.LFB138:
 254:Core/Src/main.c **** 
 445              		.loc 1 254 1 view -0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 08B5     		push	{r3, lr}
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 3, -8
 452              		.cfi_offset 14, -4
 263:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 453              		.loc 1 263 3 view .LVU112
 263:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 454              		.loc 1 263 19 is_stmt 0 view .LVU113
 455 0002 0A48     		ldr	r0, .L28
 456 0004 0A4B     		ldr	r3, .L28+4
 457 0006 0360     		str	r3, [r0]
 264:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 458              		.loc 1 264 3 is_stmt 1 view .LVU114
 264:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 459              		.loc 1 264 24 is_stmt 0 view .LVU115
 460 0008 4FF4E133 		mov	r3, #115200
 461 000c 4360     		str	r3, [r0, #4]
 265:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 33


 462              		.loc 1 265 3 is_stmt 1 view .LVU116
 265:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 463              		.loc 1 265 26 is_stmt 0 view .LVU117
 464 000e 0023     		movs	r3, #0
 465 0010 8360     		str	r3, [r0, #8]
 266:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 466              		.loc 1 266 3 is_stmt 1 view .LVU118
 266:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 467              		.loc 1 266 24 is_stmt 0 view .LVU119
 468 0012 C360     		str	r3, [r0, #12]
 267:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 469              		.loc 1 267 3 is_stmt 1 view .LVU120
 267:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 470              		.loc 1 267 22 is_stmt 0 view .LVU121
 471 0014 0361     		str	r3, [r0, #16]
 268:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 472              		.loc 1 268 3 is_stmt 1 view .LVU122
 268:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 473              		.loc 1 268 20 is_stmt 0 view .LVU123
 474 0016 0C22     		movs	r2, #12
 475 0018 4261     		str	r2, [r0, #20]
 269:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 476              		.loc 1 269 3 is_stmt 1 view .LVU124
 269:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 477              		.loc 1 269 25 is_stmt 0 view .LVU125
 478 001a 8361     		str	r3, [r0, #24]
 270:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 479              		.loc 1 270 3 is_stmt 1 view .LVU126
 270:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 480              		.loc 1 270 28 is_stmt 0 view .LVU127
 481 001c C361     		str	r3, [r0, #28]
 271:Core/Src/main.c ****   {
 482              		.loc 1 271 3 is_stmt 1 view .LVU128
 271:Core/Src/main.c ****   {
 483              		.loc 1 271 7 is_stmt 0 view .LVU129
 484 001e FFF7FEFF 		bl	HAL_UART_Init
 485              	.LVL19:
 271:Core/Src/main.c ****   {
 486              		.loc 1 271 6 discriminator 1 view .LVU130
 487 0022 00B9     		cbnz	r0, .L27
 279:Core/Src/main.c **** 
 488              		.loc 1 279 1 view .LVU131
 489 0024 08BD     		pop	{r3, pc}
 490              	.L27:
 273:Core/Src/main.c ****   }
 491              		.loc 1 273 5 is_stmt 1 view .LVU132
 492 0026 FFF7FEFF 		bl	Error_Handler
 493              	.LVL20:
 494              	.L29:
 495 002a 00BF     		.align	2
 496              	.L28:
 497 002c 00000000 		.word	huart2
 498 0030 00440040 		.word	1073759232
 499              		.cfi_endproc
 500              	.LFE138:
 502              		.section	.text.MX_TIM2_Init,"ax",%progbits
 503              		.align	1
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 34


 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 508              	MX_TIM2_Init:
 509              	.LFB136:
 176:Core/Src/main.c **** 
 510              		.loc 1 176 1 view -0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 24
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514 0000 00B5     		push	{lr}
 515              		.cfi_def_cfa_offset 4
 516              		.cfi_offset 14, -4
 517 0002 87B0     		sub	sp, sp, #28
 518              		.cfi_def_cfa_offset 32
 182:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 519              		.loc 1 182 3 view .LVU134
 182:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 520              		.loc 1 182 26 is_stmt 0 view .LVU135
 521 0004 0023     		movs	r3, #0
 522 0006 0293     		str	r3, [sp, #8]
 523 0008 0393     		str	r3, [sp, #12]
 524 000a 0493     		str	r3, [sp, #16]
 525 000c 0593     		str	r3, [sp, #20]
 183:Core/Src/main.c **** 
 526              		.loc 1 183 3 is_stmt 1 view .LVU136
 183:Core/Src/main.c **** 
 527              		.loc 1 183 27 is_stmt 0 view .LVU137
 528 000e 0093     		str	r3, [sp]
 529 0010 0193     		str	r3, [sp, #4]
 188:Core/Src/main.c ****   htim2.Init.Prescaler = 7;
 530              		.loc 1 188 3 is_stmt 1 view .LVU138
 188:Core/Src/main.c ****   htim2.Init.Prescaler = 7;
 531              		.loc 1 188 18 is_stmt 0 view .LVU139
 532 0012 1448     		ldr	r0, .L38
 533 0014 4FF08042 		mov	r2, #1073741824
 534 0018 0260     		str	r2, [r0]
 189:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 535              		.loc 1 189 3 is_stmt 1 view .LVU140
 189:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 536              		.loc 1 189 24 is_stmt 0 view .LVU141
 537 001a 0722     		movs	r2, #7
 538 001c 4260     		str	r2, [r0, #4]
 190:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 539              		.loc 1 190 3 is_stmt 1 view .LVU142
 190:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 540              		.loc 1 190 26 is_stmt 0 view .LVU143
 541 001e 8360     		str	r3, [r0, #8]
 191:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 542              		.loc 1 191 3 is_stmt 1 view .LVU144
 191:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 543              		.loc 1 191 21 is_stmt 0 view .LVU145
 544 0020 4FF0FF32 		mov	r2, #-1
 545 0024 C260     		str	r2, [r0, #12]
 192:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 546              		.loc 1 192 3 is_stmt 1 view .LVU146
 192:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 35


 547              		.loc 1 192 28 is_stmt 0 view .LVU147
 548 0026 0361     		str	r3, [r0, #16]
 193:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 549              		.loc 1 193 3 is_stmt 1 view .LVU148
 193:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 550              		.loc 1 193 32 is_stmt 0 view .LVU149
 551 0028 8361     		str	r3, [r0, #24]
 194:Core/Src/main.c ****   {
 552              		.loc 1 194 3 is_stmt 1 view .LVU150
 194:Core/Src/main.c ****   {
 553              		.loc 1 194 7 is_stmt 0 view .LVU151
 554 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 555              	.LVL21:
 194:Core/Src/main.c ****   {
 556              		.loc 1 194 6 discriminator 1 view .LVU152
 557 002e 90B9     		cbnz	r0, .L35
 198:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 558              		.loc 1 198 3 is_stmt 1 view .LVU153
 198:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 559              		.loc 1 198 34 is_stmt 0 view .LVU154
 560 0030 4FF48053 		mov	r3, #4096
 561 0034 0293     		str	r3, [sp, #8]
 199:Core/Src/main.c ****   {
 562              		.loc 1 199 3 is_stmt 1 view .LVU155
 199:Core/Src/main.c ****   {
 563              		.loc 1 199 7 is_stmt 0 view .LVU156
 564 0036 02A9     		add	r1, sp, #8
 565 0038 0A48     		ldr	r0, .L38
 566 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 567              	.LVL22:
 199:Core/Src/main.c ****   {
 568              		.loc 1 199 6 discriminator 1 view .LVU157
 569 003e 60B9     		cbnz	r0, .L36
 203:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 570              		.loc 1 203 3 is_stmt 1 view .LVU158
 203:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 571              		.loc 1 203 37 is_stmt 0 view .LVU159
 572 0040 0023     		movs	r3, #0
 573 0042 0093     		str	r3, [sp]
 204:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 574              		.loc 1 204 3 is_stmt 1 view .LVU160
 204:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 575              		.loc 1 204 33 is_stmt 0 view .LVU161
 576 0044 0193     		str	r3, [sp, #4]
 205:Core/Src/main.c ****   {
 577              		.loc 1 205 3 is_stmt 1 view .LVU162
 205:Core/Src/main.c ****   {
 578              		.loc 1 205 7 is_stmt 0 view .LVU163
 579 0046 6946     		mov	r1, sp
 580 0048 0648     		ldr	r0, .L38
 581 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 582              	.LVL23:
 205:Core/Src/main.c ****   {
 583              		.loc 1 205 6 discriminator 1 view .LVU164
 584 004e 30B9     		cbnz	r0, .L37
 213:Core/Src/main.c **** 
 585              		.loc 1 213 1 view .LVU165
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 36


 586 0050 07B0     		add	sp, sp, #28
 587              		.cfi_remember_state
 588              		.cfi_def_cfa_offset 4
 589              		@ sp needed
 590 0052 5DF804FB 		ldr	pc, [sp], #4
 591              	.L35:
 592              		.cfi_restore_state
 196:Core/Src/main.c ****   }
 593              		.loc 1 196 5 is_stmt 1 view .LVU166
 594 0056 FFF7FEFF 		bl	Error_Handler
 595              	.LVL24:
 596              	.L36:
 201:Core/Src/main.c ****   }
 597              		.loc 1 201 5 view .LVU167
 598 005a FFF7FEFF 		bl	Error_Handler
 599              	.LVL25:
 600              	.L37:
 207:Core/Src/main.c ****   }
 601              		.loc 1 207 5 view .LVU168
 602 005e FFF7FEFF 		bl	Error_Handler
 603              	.LVL26:
 604              	.L39:
 605 0062 00BF     		.align	2
 606              	.L38:
 607 0064 00000000 		.word	htim2
 608              		.cfi_endproc
 609              	.LFE136:
 611              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 612              		.align	1
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 617              	MX_USART1_UART_Init:
 618              	.LFB137:
 221:Core/Src/main.c **** 
 619              		.loc 1 221 1 view -0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623 0000 08B5     		push	{r3, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 3, -8
 626              		.cfi_offset 14, -4
 230:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 627              		.loc 1 230 3 view .LVU170
 230:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 628              		.loc 1 230 19 is_stmt 0 view .LVU171
 629 0002 0A48     		ldr	r0, .L44
 630 0004 0A4B     		ldr	r3, .L44+4
 631 0006 0360     		str	r3, [r0]
 231:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 632              		.loc 1 231 3 is_stmt 1 view .LVU172
 231:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 633              		.loc 1 231 24 is_stmt 0 view .LVU173
 634 0008 4FF4E133 		mov	r3, #115200
 635 000c 4360     		str	r3, [r0, #4]
 232:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 37


 636              		.loc 1 232 3 is_stmt 1 view .LVU174
 232:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 637              		.loc 1 232 26 is_stmt 0 view .LVU175
 638 000e 0023     		movs	r3, #0
 639 0010 8360     		str	r3, [r0, #8]
 233:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 640              		.loc 1 233 3 is_stmt 1 view .LVU176
 233:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 641              		.loc 1 233 24 is_stmt 0 view .LVU177
 642 0012 C360     		str	r3, [r0, #12]
 234:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 643              		.loc 1 234 3 is_stmt 1 view .LVU178
 234:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 644              		.loc 1 234 22 is_stmt 0 view .LVU179
 645 0014 0361     		str	r3, [r0, #16]
 235:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 646              		.loc 1 235 3 is_stmt 1 view .LVU180
 235:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 647              		.loc 1 235 20 is_stmt 0 view .LVU181
 648 0016 0C22     		movs	r2, #12
 649 0018 4261     		str	r2, [r0, #20]
 236:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 650              		.loc 1 236 3 is_stmt 1 view .LVU182
 236:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 651              		.loc 1 236 25 is_stmt 0 view .LVU183
 652 001a 8361     		str	r3, [r0, #24]
 237:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 653              		.loc 1 237 3 is_stmt 1 view .LVU184
 237:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 654              		.loc 1 237 28 is_stmt 0 view .LVU185
 655 001c C361     		str	r3, [r0, #28]
 238:Core/Src/main.c ****   {
 656              		.loc 1 238 3 is_stmt 1 view .LVU186
 238:Core/Src/main.c ****   {
 657              		.loc 1 238 7 is_stmt 0 view .LVU187
 658 001e FFF7FEFF 		bl	HAL_UART_Init
 659              	.LVL27:
 238:Core/Src/main.c ****   {
 660              		.loc 1 238 6 discriminator 1 view .LVU188
 661 0022 00B9     		cbnz	r0, .L43
 246:Core/Src/main.c **** 
 662              		.loc 1 246 1 view .LVU189
 663 0024 08BD     		pop	{r3, pc}
 664              	.L43:
 240:Core/Src/main.c ****   }
 665              		.loc 1 240 5 is_stmt 1 view .LVU190
 666 0026 FFF7FEFF 		bl	Error_Handler
 667              	.LVL28:
 668              	.L45:
 669 002a 00BF     		.align	2
 670              	.L44:
 671 002c 00000000 		.word	huart1
 672 0030 00100140 		.word	1073811456
 673              		.cfi_endproc
 674              	.LFE137:
 676              		.section	.text.SystemClock_Config,"ax",%progbits
 677              		.align	1
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 38


 678              		.global	SystemClock_Config
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 683              	SystemClock_Config:
 684              	.LFB135:
 129:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 685              		.loc 1 129 1 view -0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 80
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689 0000 00B5     		push	{lr}
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 14, -4
 692 0002 95B0     		sub	sp, sp, #84
 693              		.cfi_def_cfa_offset 88
 130:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 694              		.loc 1 130 3 view .LVU192
 130:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 695              		.loc 1 130 22 is_stmt 0 view .LVU193
 696 0004 3022     		movs	r2, #48
 697 0006 0021     		movs	r1, #0
 698 0008 08A8     		add	r0, sp, #32
 699 000a FFF7FEFF 		bl	memset
 700              	.LVL29:
 131:Core/Src/main.c **** 
 701              		.loc 1 131 3 is_stmt 1 view .LVU194
 131:Core/Src/main.c **** 
 702              		.loc 1 131 22 is_stmt 0 view .LVU195
 703 000e 0023     		movs	r3, #0
 704 0010 0393     		str	r3, [sp, #12]
 705 0012 0493     		str	r3, [sp, #16]
 706 0014 0593     		str	r3, [sp, #20]
 707 0016 0693     		str	r3, [sp, #24]
 708 0018 0793     		str	r3, [sp, #28]
 135:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 709              		.loc 1 135 3 is_stmt 1 view .LVU196
 710              	.LBB10:
 135:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 711              		.loc 1 135 3 view .LVU197
 712 001a 0193     		str	r3, [sp, #4]
 135:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 713              		.loc 1 135 3 view .LVU198
 714 001c 1F4A     		ldr	r2, .L52
 715 001e 116C     		ldr	r1, [r2, #64]
 716 0020 41F08051 		orr	r1, r1, #268435456
 717 0024 1164     		str	r1, [r2, #64]
 135:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 718              		.loc 1 135 3 view .LVU199
 719 0026 126C     		ldr	r2, [r2, #64]
 720 0028 02F08052 		and	r2, r2, #268435456
 721 002c 0192     		str	r2, [sp, #4]
 135:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 722              		.loc 1 135 3 view .LVU200
 723 002e 019A     		ldr	r2, [sp, #4]
 724              	.LBE10:
 135:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 39


 725              		.loc 1 135 3 view .LVU201
 136:Core/Src/main.c **** 
 726              		.loc 1 136 3 view .LVU202
 727              	.LBB11:
 136:Core/Src/main.c **** 
 728              		.loc 1 136 3 view .LVU203
 729 0030 0293     		str	r3, [sp, #8]
 136:Core/Src/main.c **** 
 730              		.loc 1 136 3 view .LVU204
 731 0032 1B49     		ldr	r1, .L52+4
 732 0034 0A68     		ldr	r2, [r1]
 733 0036 22F44042 		bic	r2, r2, #49152
 734 003a 42F40042 		orr	r2, r2, #32768
 735 003e 0A60     		str	r2, [r1]
 136:Core/Src/main.c **** 
 736              		.loc 1 136 3 view .LVU205
 737 0040 0A68     		ldr	r2, [r1]
 738 0042 02F44042 		and	r2, r2, #49152
 739 0046 0292     		str	r2, [sp, #8]
 136:Core/Src/main.c **** 
 740              		.loc 1 136 3 view .LVU206
 741 0048 029A     		ldr	r2, [sp, #8]
 742              	.LBE11:
 136:Core/Src/main.c **** 
 743              		.loc 1 136 3 view .LVU207
 141:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 744              		.loc 1 141 3 view .LVU208
 141:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 745              		.loc 1 141 36 is_stmt 0 view .LVU209
 746 004a 0222     		movs	r2, #2
 747 004c 0892     		str	r2, [sp, #32]
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 748              		.loc 1 142 3 is_stmt 1 view .LVU210
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 749              		.loc 1 142 30 is_stmt 0 view .LVU211
 750 004e 0121     		movs	r1, #1
 751 0050 0B91     		str	r1, [sp, #44]
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 752              		.loc 1 143 3 is_stmt 1 view .LVU212
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 753              		.loc 1 143 41 is_stmt 0 view .LVU213
 754 0052 1021     		movs	r1, #16
 755 0054 0C91     		str	r1, [sp, #48]
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 756              		.loc 1 144 3 is_stmt 1 view .LVU214
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 757              		.loc 1 144 34 is_stmt 0 view .LVU215
 758 0056 0E92     		str	r2, [sp, #56]
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 759              		.loc 1 145 3 is_stmt 1 view .LVU216
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 760              		.loc 1 145 35 is_stmt 0 view .LVU217
 761 0058 0F93     		str	r3, [sp, #60]
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 80;
 762              		.loc 1 146 3 is_stmt 1 view .LVU218
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 80;
 763              		.loc 1 146 30 is_stmt 0 view .LVU219
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 40


 764 005a 0823     		movs	r3, #8
 765 005c 1093     		str	r3, [sp, #64]
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 766              		.loc 1 147 3 is_stmt 1 view .LVU220
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 767              		.loc 1 147 30 is_stmt 0 view .LVU221
 768 005e 5023     		movs	r3, #80
 769 0060 1193     		str	r3, [sp, #68]
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 770              		.loc 1 148 3 is_stmt 1 view .LVU222
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 771              		.loc 1 148 30 is_stmt 0 view .LVU223
 772 0062 1292     		str	r2, [sp, #72]
 149:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 773              		.loc 1 149 3 is_stmt 1 view .LVU224
 149:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 774              		.loc 1 149 30 is_stmt 0 view .LVU225
 775 0064 0723     		movs	r3, #7
 776 0066 1393     		str	r3, [sp, #76]
 150:Core/Src/main.c ****   {
 777              		.loc 1 150 3 is_stmt 1 view .LVU226
 150:Core/Src/main.c ****   {
 778              		.loc 1 150 7 is_stmt 0 view .LVU227
 779 0068 08A8     		add	r0, sp, #32
 780 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 781              	.LVL30:
 150:Core/Src/main.c ****   {
 782              		.loc 1 150 6 discriminator 1 view .LVU228
 783 006e 80B9     		cbnz	r0, .L50
 157:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 784              		.loc 1 157 3 is_stmt 1 view .LVU229
 157:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 785              		.loc 1 157 31 is_stmt 0 view .LVU230
 786 0070 0F23     		movs	r3, #15
 787 0072 0393     		str	r3, [sp, #12]
 159:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 788              		.loc 1 159 3 is_stmt 1 view .LVU231
 159:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 789              		.loc 1 159 34 is_stmt 0 view .LVU232
 790 0074 0221     		movs	r1, #2
 791 0076 0491     		str	r1, [sp, #16]
 160:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 792              		.loc 1 160 3 is_stmt 1 view .LVU233
 160:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 793              		.loc 1 160 35 is_stmt 0 view .LVU234
 794 0078 0023     		movs	r3, #0
 795 007a 0593     		str	r3, [sp, #20]
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 796              		.loc 1 161 3 is_stmt 1 view .LVU235
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 797              		.loc 1 161 36 is_stmt 0 view .LVU236
 798 007c 4FF48052 		mov	r2, #4096
 799 0080 0692     		str	r2, [sp, #24]
 162:Core/Src/main.c **** 
 800              		.loc 1 162 3 is_stmt 1 view .LVU237
 162:Core/Src/main.c **** 
 801              		.loc 1 162 36 is_stmt 0 view .LVU238
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 41


 802 0082 0793     		str	r3, [sp, #28]
 164:Core/Src/main.c ****   {
 803              		.loc 1 164 3 is_stmt 1 view .LVU239
 164:Core/Src/main.c ****   {
 804              		.loc 1 164 7 is_stmt 0 view .LVU240
 805 0084 03A8     		add	r0, sp, #12
 806 0086 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 807              	.LVL31:
 164:Core/Src/main.c ****   {
 808              		.loc 1 164 6 discriminator 1 view .LVU241
 809 008a 20B9     		cbnz	r0, .L51
 168:Core/Src/main.c **** 
 810              		.loc 1 168 1 view .LVU242
 811 008c 15B0     		add	sp, sp, #84
 812              		.cfi_remember_state
 813              		.cfi_def_cfa_offset 4
 814              		@ sp needed
 815 008e 5DF804FB 		ldr	pc, [sp], #4
 816              	.L50:
 817              		.cfi_restore_state
 152:Core/Src/main.c ****   }
 818              		.loc 1 152 5 is_stmt 1 view .LVU243
 819 0092 FFF7FEFF 		bl	Error_Handler
 820              	.LVL32:
 821              	.L51:
 166:Core/Src/main.c ****   }
 822              		.loc 1 166 5 view .LVU244
 823 0096 FFF7FEFF 		bl	Error_Handler
 824              	.LVL33:
 825              	.L53:
 826 009a 00BF     		.align	2
 827              	.L52:
 828 009c 00380240 		.word	1073887232
 829 00a0 00700040 		.word	1073770496
 830              		.cfi_endproc
 831              	.LFE135:
 833              		.section	.text.main,"ax",%progbits
 834              		.align	1
 835              		.global	main
 836              		.syntax unified
 837              		.thumb
 838              		.thumb_func
 840              	main:
 841              	.LFB134:
  82:Core/Src/main.c **** 
 842              		.loc 1 82 1 view -0
 843              		.cfi_startproc
 844              		@ Volatile: function does not return.
 845              		@ args = 0, pretend = 0, frame = 0
 846              		@ frame_needed = 0, uses_anonymous_args = 0
 847 0000 08B5     		push	{r3, lr}
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 3, -8
 850              		.cfi_offset 14, -4
  91:Core/Src/main.c **** 
 851              		.loc 1 91 3 view .LVU246
 852 0002 FFF7FEFF 		bl	HAL_Init
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 42


 853              	.LVL34:
  98:Core/Src/main.c **** 
 854              		.loc 1 98 3 view .LVU247
 855 0006 FFF7FEFF 		bl	SystemClock_Config
 856              	.LVL35:
 105:Core/Src/main.c ****   MX_USART2_UART_Init();
 857              		.loc 1 105 3 view .LVU248
 858 000a FFF7FEFF 		bl	MX_GPIO_Init
 859              	.LVL36:
 106:Core/Src/main.c ****   MX_TIM2_Init();
 860              		.loc 1 106 3 view .LVU249
 861 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 862              	.LVL37:
 107:Core/Src/main.c ****   MX_USART1_UART_Init();
 863              		.loc 1 107 3 view .LVU250
 864 0012 FFF7FEFF 		bl	MX_TIM2_Init
 865              	.LVL38:
 108:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 866              		.loc 1 108 3 view .LVU251
 867 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 868              	.LVL39:
 110:Core/Src/main.c ****   /* USER CODE END 2 */
 869              		.loc 1 110 3 view .LVU252
 870 001a 0248     		ldr	r0, .L57
 871 001c FFF7FEFF 		bl	HAL_TIM_Base_Start
 872              	.LVL40:
 873              	.L55:
 115:Core/Src/main.c ****   {
 874              		.loc 1 115 3 view .LVU253
 120:Core/Src/main.c ****   /* USER CODE END 3 */
 875              		.loc 1 120 3 view .LVU254
 115:Core/Src/main.c ****   {
 876              		.loc 1 115 9 view .LVU255
 877 0020 FEE7     		b	.L55
 878              	.L58:
 879 0022 00BF     		.align	2
 880              	.L57:
 881 0024 00000000 		.word	htim2
 882              		.cfi_endproc
 883              	.LFE134:
 885              		.global	huart2
 886              		.section	.bss.huart2,"aw",%nobits
 887              		.align	2
 890              	huart2:
 891 0000 00000000 		.space	72
 891      00000000 
 891      00000000 
 891      00000000 
 891      00000000 
 892              		.global	huart1
 893              		.section	.bss.huart1,"aw",%nobits
 894              		.align	2
 897              	huart1:
 898 0000 00000000 		.space	72
 898      00000000 
 898      00000000 
 898      00000000 
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 43


 898      00000000 
 899              		.global	htim2
 900              		.section	.bss.htim2,"aw",%nobits
 901              		.align	2
 904              	htim2:
 905 0000 00000000 		.space	72
 905      00000000 
 905      00000000 
 905      00000000 
 905      00000000 
 906              		.global	capturedValue
 907              		.section	.bss.capturedValue,"aw",%nobits
 908              		.align	2
 911              	capturedValue:
 912 0000 00000000 		.space	4
 913              		.global	time_diff_us
 914              		.section	.bss.time_diff_us,"aw",%nobits
 915              		.align	3
 918              	time_diff_us:
 919 0000 00000000 		.space	8
 919      00000000 
 920              		.global	time_diff
 921              		.section	.bss.time_diff,"aw",%nobits
 922              		.align	3
 925              	time_diff:
 926 0000 00000000 		.space	8
 926      00000000 
 927              		.global	frequency
 928              		.section	.bss.frequency,"aw",%nobits
 929              		.align	2
 932              	frequency:
 933 0000 00000000 		.space	4
 934              		.global	HzToRPM
 935              		.section	.rodata.HzToRPM,"a"
 936              		.align	2
 939              	HzToRPM:
 940 0000 3C000000 		.word	60
 941              		.global	MusTOhz
 942              		.section	.rodata.MusTOhz,"a"
 943              		.align	2
 946              	MusTOhz:
 947 0000 00247449 		.word	1232348160
 948              		.global	RPM
 949              		.section	.bss.RPM,"aw",%nobits
 950              		.align	2
 953              	RPM:
 954 0000 00000000 		.space	4
 955              		.global	prev_prev_tim2Counter
 956              		.section	.bss.prev_prev_tim2Counter,"aw",%nobits
 957              		.align	2
 960              	prev_prev_tim2Counter:
 961 0000 00000000 		.space	4
 962              		.global	prev_tim2Counter
 963              		.section	.bss.prev_tim2Counter,"aw",%nobits
 964              		.align	2
 967              	prev_tim2Counter:
 968 0000 00000000 		.space	4
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 44


 969              		.global	curr_tim2Counter
 970              		.section	.bss.curr_tim2Counter,"aw",%nobits
 971              		.align	2
 974              	curr_tim2Counter:
 975 0000 00000000 		.space	4
 976              		.global	COUNTER
 977              		.section	.bss.COUNTER,"aw",%nobits
 978              		.align	2
 981              	COUNTER:
 982 0000 00000000 		.space	4
 983              		.text
 984              	.Letext0:
 985              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 986              		.file 4 "C:/Users/Vikram Rao/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-d
 987              		.file 5 "C:/Users/Vikram Rao/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-d
 988              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 989              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 990              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 991              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 992              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 993              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 994              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 995              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 996              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 997              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 998              		.file 16 "<built-in>"
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:188    .text.MX_GPIO_Init:000000c4 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:200    .text.HAL_GPIO_EXTI_Callback:00000000 $t
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:206    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:382    .text.HAL_GPIO_EXTI_Callback:000000f0 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:904    .bss.htim2:00000000 htim2
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:974    .bss.curr_tim2Counter:00000000 curr_tim2Counter
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:981    .bss.COUNTER:00000000 COUNTER
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:960    .bss.prev_prev_tim2Counter:00000000 prev_prev_tim2Counter
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:925    .bss.time_diff:00000000 time_diff
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:918    .bss.time_diff_us:00000000 time_diff_us
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:932    .bss.frequency:00000000 frequency
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:953    .bss.RPM:00000000 RPM
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:967    .bss.prev_tim2Counter:00000000 prev_tim2Counter
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:400    .text.Error_Handler:00000000 $t
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:406    .text.Error_Handler:00000000 Error_Handler
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:438    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:443    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:497    .text.MX_USART2_UART_Init:0000002c $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:890    .bss.huart2:00000000 huart2
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:503    .text.MX_TIM2_Init:00000000 $t
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:508    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:607    .text.MX_TIM2_Init:00000064 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:612    .text.MX_USART1_UART_Init:00000000 $t
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:617    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:671    .text.MX_USART1_UART_Init:0000002c $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:897    .bss.huart1:00000000 huart1
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:677    .text.SystemClock_Config:00000000 $t
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:683    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:828    .text.SystemClock_Config:0000009c $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:834    .text.main:00000000 $t
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:840    .text.main:00000000 main
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:881    .text.main:00000024 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:887    .bss.huart2:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:894    .bss.huart1:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:901    .bss.htim2:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:911    .bss.capturedValue:00000000 capturedValue
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:908    .bss.capturedValue:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:915    .bss.time_diff_us:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:922    .bss.time_diff:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:929    .bss.frequency:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:939    .rodata.HzToRPM:00000000 HzToRPM
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:936    .rodata.HzToRPM:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:946    .rodata.MusTOhz:00000000 MusTOhz
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:943    .rodata.MusTOhz:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:950    .bss.RPM:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:957    .bss.prev_prev_tim2Counter:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:964    .bss.prev_tim2Counter:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:971    .bss.curr_tim2Counter:00000000 $d
C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s:978    .bss.COUNTER:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
ARM GAS  C:\Users\VIKRAM~1\AppData\Local\Temp\ccvGo6Bb.s 			page 46


HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2f
__aeabi_l2d
__aeabi_dcmpgt
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_TIM_Base_Start
